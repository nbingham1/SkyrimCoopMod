#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <iphlpapi.h>
#include <stdio.h>
#include <conio.h>
#include <process.h>

#include "common\skyscript.h"
#include "common\obscript.h"
#include "common\types.h"
#include "common\enums.h"
#include "common\plugin.h"

#include "sdk_addon.h"
#include "cmd_queue.h"
#include "ref_list.h"
#include "packets.h"

#define ITEMARRAYSIZE 7149
uint item_array[] = {0x00043E26, 0x00094E40, 0x00063B29, 0x00063B27, 0x0002E504, 0x0002E500, 0x0002E4FF, 0x0002E4FC, 0x0002E4FB, 0x0002E4F4, 0x0002E4F3, 0x0002E4E6, 0x0002E4E5, 0x0002E4E4, 0x0002E4E3, 0x0002E4E2, 0x0010D666, 0x00107A8A, 0x0010394D, 0x0010211A, 0x0010201E, 0x0010201D, 0x0010201C, 0x0010201B, 0x0010201A, 0x00102019, 0x000FFA02, 0x000FFA01, 0x000FFA00, 0x000FF9FF, 0x000FF9FE, 0x000FF9FD, 0x000FF9FC, 0x000F9642, 0x000F84C6, 0x000F84C5, 0x000F84C4, 0x000F84C3, 0x000F84C2, 0x000F84C1, 0x000F84C0, 0x000F84BF, 0x000F84BE, 0x000F84BD, 0x000F84BC, 0x000F84BB, 0x000F84BA, 0x000F84B9, 0x000F84B8, 0x000F84B7, 0x000F84B6, 0x000F84B5, 0x000F84B3, 0x000F84B2, 0x000F84B1, 0x000F84B0, 0x000F84AF, 0x000F84AE, 0x000F84AC, 0x000F84AB, 0x000F84AA, 0x000F84A9, 0x000F84A8, 0x000F84A7, 0x000F693F, 0x000F4320, 0x000F431E, 0x000F431D, 0x000F431C, 0x000F431B, 0x000F4315, 0x000F4314, 0x000F257E, 0x000E8947, 0x000F2011, 0x000EDB2E, 0x000EBA03, 0x000EBA02, 0x000EBA01, 0x000E8448, 0x000D6980, 0x000D697F, 0x000D6949, 0x000D6948, 0x000D055E, 0x000CD883, 0x000CD614, 0x000CADFB, 0x000B91D7, 0x00085368, 0x000722C7, 0x000722C2, 0x000722BD, 0x000722BB, 0x000722B0, 0x0007224E, 0x0007224C, 0x000721E8, 0x000669A5, 0x000669A4, 0x000669A3, 0x000669A2, 0x00065C9F, 0x00065C9E, 0x00065C9D, 0x00065C9C, 0x00065C9B, 0x00065C9A, 0x00065C99, 0x00065C98, 0x00065C97, 0x00065C39, 0x00065C38, 0x00065C37, 0x00064B43, 0x00064B42, 0x00064B41, 0x00064B40, 0x00064B3F, 0x00064B3E, 0x00064B3D, 0x00064B3C, 0x00064B3B, 0x00064B3A, 0x00064B39, 0x00064B38, 0x00064B36, 0x00064B35, 0x00064B34, 0x00064B33, 0x00064B32, 0x00064B31, 0x00064B30, 0x00064B2F, 0x00064B2E, 0x0005566A, 0x000555E8, 0x0003F4BD, 0x000E6DF5, 0x000E41B8, 0x000E2D3D, 0x000DC172, 0x000C5349, 0x000C5348, 0x000A9661, 0x000AED90, 0x000AE723, 0x0009380D, 0x00076F17, 0x00074A3B, 0x00074A3A, 0x00074A39, 0x00074A38, 0x00073F94, 0x00073F93, 0x00073F92, 0x00073F91, 0x00073F90, 0x00073F8E, 0x00073F8D, 0x00073F8C, 0x00073F8B, 0x00073F61, 0x00073F60, 0x00073F5F, 0x00073F5E, 0x00073F5D, 0x00073F5C, 0x00073F5B, 0x00073F5A, 0x00073F59, 0x00073F58, 0x00073F57, 0x00073F56, 0x00073F55, 0x00073F54, 0x00073F53, 0x00073F52, 0x00073F50, 0x00073F4F, 0x00073F4E, 0x00073F4D, 0x00073F4C, 0x00073F4B, 0x00073F4A, 0x00073F49, 0x00073F48, 0x00073F47, 0x00073F46, 0x00073F45, 0x00073F44, 0x00073F43, 0x00073F42, 0x00073F41, 0x00073F40, 0x00073F3F, 0x00073F3E, 0x00073F3D, 0x00073F3C, 0x00073F3B, 0x00073F3A, 0x00073F39, 0x00073F38, 0x00073F37, 0x00073F36, 0x00073F35, 0x00073F34, 0x00073F33, 0x00073F32, 0x00073F31, 0x000663E1, 0x00065A71, 0x00065A70, 0x00065A6F, 0x00065A6E, 0x00065A6D, 0x00065A6C, 0x00065A6B, 0x00065A6A, 0x00065A69, 0x00065A68, 0x00065A66, 0x00065A65, 0x00065A64, 0x0005F6DF, 0x00057A7B, 0x00057A7A, 0x00058CFB, 0x000508CA, 0x0003AC31, 0x0003AC30, 0x0003AC2F, 0x0003AC2E, 0x0003A5A4, 0x00039E55, 0x00039E54, 0x00039E53, 0x00039E52, 0x00039D12, 0x00039D0A, 0x00039D02, 0x00039CFB, 0x00039CF3, 0x00039BE8, 0x00039BE7, 0x00039BE6, 0x00039BE5, 0x00039BE4, 0x00039BE3, 0x00039BE1, 0x00039BDF, 0x00039B8A, 0x00039B4B, 0x00039B4A, 0x00039B0C, 0x00039AA6, 0x00039980, 0x00039974, 0x00039973, 0x00039971, 0x00039970, 0x0003996F, 0x00039969, 0x00039968, 0x00039967, 0x00039962, 0x0003995D, 0x0003995C, 0x0003995B, 0x0003995A, 0x00039959, 0x00039958, 0x00039957, 0x00039956, 0x00039955, 0x00039954, 0x00039951, 0x00039950, 0x0003994F, 0x0003994E, 0x0003994B, 0x00039949, 0x00039948, 0x00039946, 0x00039945, 0x00039930, 0x00039904, 0x00039903, 0x000398FD, 0x000398F6, 0x000398F5, 0x000398F4, 0x000398F3, 0x000398F1, 0x000398EE, 0x000398ED, 0x000398EC, 0x000398AD, 0x000398AC, 0x000398AB, 0x0003989B, 0x0003989A, 0x00039899, 0x0003988E, 0x0003EB41, 0x0003EB40, 0x0003EB3F, 0x0003EB3E, 0x0003EB3A, 0x0003EB39, 0x0003EB38, 0x0003EB37, 0x0003EB36, 0x0003EB35, 0x0003EB33, 0x0003EB32, 0x0003EB31, 0x0003EB30, 0x0003EB2F, 0x0003EB2E, 0x0003EB2C, 0x0003EB2B, 0x0003EB2A, 0x0003EB14, 0x0003EB12, 0x0003EB11, 0x0003EB10, 0x0003EB0F, 0x0003EB0E, 0x0003EB0D, 0x0003EB0C, 0x0003EB0B, 0x0003EB0A, 0x0003EB09, 0x0003EB05, 0x0003EB04, 0x0003EB03, 0x0003EB02, 0x0003EB00, 0x0003EAFF, 0x0003EAFE, 0x0003EAFD, 0x0003EAFC, 0x0003EAFB, 0x0003EAFA, 0x0003EAF7, 0x0003EAF6, 0x0003EAF5, 0x0003EAF4, 0x0003EAF2, 0x0003EAF1, 0x0003EAF0, 0x0003EAEF, 0x0003EAEE, 0x0003EAED, 0x0003EAE9, 0x0003EAE8, 0x0003EAE7, 0x0003EAE6, 0x0003EAE5, 0x0003EAE4, 0x0003EAE3, 0x0003EAE2, 0x0003EAE1, 0x0003EAE0, 0x0003EADF, 0x0003EADE, 0x0003EADD, 0x0003133C, 0x0003133B, 0x00036D53, 0x00034C5E, 0x00034C5D, 0x0001895F, 0x0002C35A, 0x0010E7E6, 0x0010BEFF, 0x00108BA5, 0x00108BA4, 0x00107D97, 0x00106E24, 0x00106E23, 0x00106E22, 0x00106E21, 0x0010480C, 0x00102EBA, 0x00100FA6, 0x0010080E, 0x000FF787, 0x000FE2B3, 0x000FE2B2, 0x000FE2B1, 0x000FDEC1, 0x000FDEC0, 0x000FDEBF, 0x000FDEBE, 0x000FDEBD, 0x000FDEBC, 0x000FDEBB, 0x000FDEBA, 0x000FDEB9, 0x000FDEB8, 0x000FDEB7, 0x000FDEB6, 0x000FDEB5, 0x000FDEB4, 0x000FDEB3, 0x000FDEB2, 0x000FB90D, 0x000FB90C, 0x000F9924, 0x000F84CB, 0x000F84A5, 0x000F669B, 0x000F4A1A, 0x000F49BE, 0x000F232E, 0x000F18F9, 0x000F18F7, 0x000F18EC, 0x000EF02F, 0x000ED02D, 0x000E9918, 0x000E94D4, 0x000DD744, 0x000D8996, 0x000D7772, 0x000CC59C, 0x000C5140, 0x000BECDE, 0x000BECD8, 0x000BEC39, 0x000BEB82, 0x000BD79C, 0x000B8F43, 0x000B8F42, 0x000B8F35, 0x000B862F, 0x000B858A, 0x000990DF, 0x000537F8, 0x0002C474, 0x00085D57, 0x00085D45, 0x00065780, 0x0005B614, 0x0004700D, 0x0003E141, 0x0003C590, 0x0003C514, 0x000E82C3, 0x000E6DFE, 0x000E6C64, 0x000E6705, 0x000E3F98, 0x000E17A8, 0x000DC175, 0x000DB0E2, 0x000D8F0C, 0x000D81F9, 0x000D66F9, 0x000D509B, 0x000D3E6A, 0x000D2947, 0x000D1843, 0x000CA5EB, 0x000C6321, 0x000C62A1, 0x000C1405, 0x000C1402, 0x000C13FF, 0x000C13FC, 0x000C13F9, 0x000C13F6, 0x000C13F3, 0x000C13F0, 0x000C13ED, 0x000C13EA, 0x000C13E7, 0x000C13E4, 0x000C13E1, 0x000C13DE, 0x000C13DB, 0x000C13D8, 0x000C13D5, 0x000C13D2, 0x000C13CF, 0x000C13CC, 0x000C13C9, 0x000C13C6, 0x000C13C3, 0x000C13C0, 0x000C13AA, 0x000C13A9, 0x000C13A8, 0x000C13A7, 0x000C13A6, 0x000C13A5, 0x000C139E, 0x000C1395, 0x000C007B, 0x0009C876, 0x0009C875, 0x0009C874, 0x0009C872, 0x0009C870, 0x0009C86F, 0x0009C86E, 0x0009C86C, 0x0009C86A, 0x0009C867, 0x0009C865, 0x0009C864, 0x0009C7DA, 0x0009C79B, 0x0009C795, 0x0009C6FD, 0x0009C6D7, 0x00061AED, 0x0005E4A8, 0x000835CA, 0x00072B05, 0x0005CDC6, 0x0005CDBC, 0x0004EC50, 0x0004E0B7, 0x0002E3F9, 0x0002E3F8, 0x000BED2D, 0x000BC6FE, 0x000BBB7F, 0x000B965D, 0x000B8764, 0x000B8761, 0x000B7CBC, 0x000B7C00, 0x000B6FE5, 0x000B6439, 0x000B5178, 0x000B48FE, 0x000AB6FE, 0x000A9F21, 0x000A7B37, 0x000A7B36, 0x000A0D46, 0x000A035E, 0x0009FD51, 0x0009E2A6, 0x0009E2A5, 0x0009E2A4, 0x0009E2A3, 0x0009E2A2, 0x0009E29A, 0x0009E299, 0x0009E298, 0x0009E28F, 0x0009E28E, 0x0009E134, 0x0009E133, 0x0009E131, 0x0009DA42, 0x0009DA41, 0x0009DA39, 0x0009DA38, 0x0009DA37, 0x0009DA32, 0x0009DA31, 0x0009DA2D, 0x0009D392, 0x0009AEFF, 0x00098B7D, 0x00098B7C, 0x00098B7B, 0x00098B7A, 0x00096573, 0x000960F0, 0x00094392, 0x00094391, 0x00093BF4, 0x00093B14, 0x00093B13, 0x00093B12, 0x00093B11, 0x00093B10, 0x00093B0F, 0x00093B0E, 0x00093B0D, 0x00093B0C, 0x00093B0B, 0x00093B0A, 0x00093B09, 0x00093B08, 0x00093B07, 0x00093B06, 0x00093B05, 0x00091F0E, 0x000918C6, 0x0008E5D1, 0x0008B232, 0x0007D94C, 0x0008715F, 0x0008683B, 0x0007E019, 0x000798C1, 0x00078DC2, 0x000786BA, 0x000401F4, 0x0002E104, 0x000734C5, 0x00071C08, 0x00071C07, 0x00070E80, 0x0006F88C, 0x0006D0AD, 0x0006B705, 0x000695C7, 0x0006649A, 0x00066485, 0x000656EE, 0x000656EC, 0x000656E8, 0x000656E5, 0x000656E3, 0x000656E1, 0x00065678, 0x00065676, 0x00065674, 0x00065673, 0x00065672, 0x00065670, 0x0006566E, 0x0006566C, 0x0006566A, 0x00065669, 0x00065667, 0x00065665, 0x00065663, 0x00065661, 0x00065660, 0x0006565E, 0x0006565C, 0x0006565B, 0x0006565A, 0x00065659, 0x00065658, 0x00065656, 0x00065655, 0x00065653, 0x00065651, 0x00065650, 0x0006564E, 0x000648B6, 0x00063B5D, 0x00062893, 0x0002BAE2, 0x000612B8, 0x0005DCB9, 0x0005AEC4, 0x00057B66, 0x00056B90, 0x00056AF7, 0x00055901, 0x0002E5FB, 0x0001AB5D, 0x00051988, 0x000506D2, 0x00050341, 0x0004D6E2, 0x0004C475, 0x0004B6D2, 0x00041965, 0x00028D8B, 0x00027F7A, 0x00048141, 0x0004811D, 0x00044E78, 0x000446D8, 0x00043A71, 0x0003E694, 0x0003E4F2, 0x0003D26B, 0x00038CE2, 0x0003718E, 0x00028440, 0x00016FF1, 0x0001F147, 0x0001E30D, 0x0003BB13, 0x0003AD48, 0x0003A694, 0x0003A691, 0x00039F29, 0x00036A42, 0x00036A41, 0x00036A40, 0x00036A3F, 0x00036A3E, 0x00036A3D, 0x00034C91, 0x00030B37, 0x00022896, 0x00019CFF, 0x0002BAA7, 0x0002AC70, 0x00026BC8, 0x000241B4, 0x00023A70, 0x00021679, 0x0001C250, 0x0010EC8C, 0x0010E2DE, 0x0010B0A7, 0x00109AB7, 0x00109AB6, 0x00109AB5, 0x00109AB4, 0x00109AB3, 0x00105EE7, 0x000EAFDF, 0x000E738A, 0x000CEE9E, 0x000CAB52, 0x000961D6, 0x0007B935, 0x0007B932, 0x00020F02, 0x00020DDF, 0x00073FE6, 0x0006DA4F, 0x000236DD, 0x00038341, 0x00034182, 0x000139C0, 0x000139BF, 0x000139BE, 0x000139BD, 0x000139BC, 0x000139BB, 0x0001397F, 0x0001397D, 0x00106E1C, 0x00106E1B, 0x00106E1A, 0x00106E19, 0x00106E18, 0x001016B3, 0x000F11C0, 0x000EC870, 0x000D8E3F, 0x000B701A, 0x000B08C5, 0x000A9195, 0x000A9191, 0x00085500, 0x000854FE, 0x000705B7, 0x0006BC10, 0x0006BC0E, 0x0006BC0B, 0x0006BC0A, 0x0006BC07, 0x0006BC04, 0x0006BC02, 0x0006BC00, 0x00023D77, 0x00023D6F, 0x000E7ED0, 0x000E7EBC, 0x000E4F0C, 0x0004DA73, 0x0004DA25, 0x0004DA24, 0x0004DA23, 0x0004DA22, 0x0004DA20, 0x0004DA00, 0x0001BCBC, 0x000BB956, 0x000B2183, 0x000B18CD, 0x0009151B, 0x0006AC4A, 0x000889A2, 0x00083E64, 0x0007EE01, 0x0007EDF5, 0x0007E8C8, 0x0007E8C5, 0x0007E8C1, 0x0007E8B7, 0x00077E1E, 0x00077E1D, 0x00077E1C, 0x000727E0, 0x000727DF, 0x000727DE, 0x0006B689, 0x0006ABCB, 0x000516C8, 0x00074A19, 0x0006F950, 0x00063B5F, 0x00059B86, 0x00057F91, 0x00052695, 0x0005076E, 0x0004B0BA, 0x00045C28, 0x0003F7F8, 0x0003AD76, 0x0003AD73, 0x0003AD72, 0x0003AD71, 0x0003AD70, 0x0003AD6F, 0x0003AD6A, 0x0003AD66, 0x0003AD64, 0x0003AD63, 0x0003AD61, 0x0003AD60, 0x0003AD5F, 0x0003AD5E, 0x0003AD5D, 0x0003AD5B, 0x0003AD56, 0x00034D32, 0x00034D31, 0x00034D22, 0x00034CDF, 0x00034CDD, 0x0002F44C, 0x0001B3BD, 0x000134AA, 0x0010FD60, 0x0010F7F5, 0x0010F7F4, 0x0010F7F3, 0x0010F786, 0x0010F785, 0x0010F784, 0x0010F783, 0x0010F782, 0x0010F781, 0x0010F780, 0x0010F77F, 0x0010F77E, 0x0010F77D, 0x0010F77C, 0x0010F77B, 0x0010F77A, 0x0010F779, 0x0010F778, 0x0010F777, 0x0010F776, 0x0010F775, 0x0010F774, 0x0010F773, 0x0010F772, 0x0010F771, 0x0010F770, 0x0010F76F, 0x0010F76E, 0x0010F76D, 0x0010F76C, 0x0010F76B, 0x0010F76A, 0x0010F769, 0x0010F766, 0x0010F64D, 0x0010BEDF, 0x0010B2CD, 0x00109112, 0x00108160, 0x001065F5, 0x00105A52, 0x0010596A, 0x000FF7D1, 0x000FF227, 0x000FF223, 0x000FF207, 0x000FDE7B, 0x000FBA57, 0x000F98B4, 0x000F86FE, 0x000F84A1, 0x000F798C, 0x000F699D, 0x000F6933, 0x000F6932, 0x000F6931, 0x000F6930, 0x000F692F, 0x000F692E, 0x000F692D, 0x000F692C, 0x000F692B, 0x000F692A, 0x000F6929, 0x000F6928, 0x000F68AD, 0x000F68AC, 0x000F68AB, 0x000F68AA, 0x000F68A9, 0x000F68A8, 0x000F68A7, 0x000F68A6, 0x000F68A5, 0x000F68A4, 0x000F68A3, 0x000F68A2, 0x000F68A1, 0x000F68A0, 0x000F689F, 0x000F689E, 0x000F689D, 0x000F689C, 0x000F689B, 0x000F689A, 0x000F6899, 0x000F6898, 0x000F6897, 0x000F6896, 0x000F6895, 0x000F6894, 0x000F6893, 0x000F6846, 0x000F6845, 0x000F6844, 0x000F6843, 0x000F6842, 0x000F6841, 0x000F6840, 0x000F683F, 0x000F6278, 0x000F6277, 0x000F6276, 0x000F6275, 0x000F5CC7, 0x000F5CC6, 0x000F5CC5, 0x000F5CC4, 0x000F5CC3, 0x000F5CC2, 0x000F5CC1, 0x000F5CC0, 0x000F5CBF, 0x000F5CBE, 0x000F5CBD, 0x000F5CBC, 0x000F5CBB, 0x000F5CBA, 0x000F5CB9, 0x000F5CB8, 0x000F5CB7, 0x000F5CB6, 0x000F5CB5, 0x000F5CB4, 0x000F5CB3, 0x000F5CB2, 0x000F5CB1, 0x000F5CAF, 0x000F5CAE, 0x000F5CAD, 0x000F5CAC, 0x000F5BC0, 0x000F54D4, 0x000F4997, 0x000F456D, 0x000F4530, 0x000F37D0, 0x000F33E0, 0x000F33D5, 0x000F33D4, 0x000F33D3, 0x000F33D2, 0x000F33D1, 0x000F33D0, 0x000F33CF, 0x000F33CE, 0x000F33CD, 0x000F23E0, 0x000F23BA, 0x000EB090, 0x000F1C19, 0x000F1C18, 0x000F1C17, 0x000F1AB3, 0x000F1447, 0x000F1446, 0x000F1445, 0x000F11D5, 0x000F11B7, 0x000F11B6, 0x000F0425, 0x000F0424, 0x000F0423, 0x000F0422, 0x000F0417, 0x000F03E5, 0x000F03E3, 0x000EF638, 0x000EF579, 0x000EF53E, 0x000EF2C0, 0x000EF07A, 0x000EDDD5, 0x000EDD35, 0x000EDA90, 0x000EDA8F, 0x000EDA8E, 0x000ED63F, 0x000ED60C, 0x000ED60B, 0x000ED608, 0x000ED607, 0x000ED606, 0x000ED605, 0x000ED604, 0x000ED603, 0x000ED601, 0x000ED5F8, 0x000ED5F7, 0x000ED5F6, 0x000ED5F5, 0x000ED5F4, 0x000ED441, 0x000ED161, 0x000ED092, 0x000ED091, 0x000ED090, 0x000ED08F, 0x000ED062, 0x000ED061, 0x000ED04F, 0x000ED04E, 0x000ED04D, 0x000ED04C, 0x000ED04B, 0x000ED048, 0x000ED047, 0x000ED046, 0x000ED045, 0x000ED044, 0x000ED042, 0x000ED041, 0x000ED040, 0x000ED03F, 0x000ED03D, 0x000ED03C, 0x000ED03B, 0x000ED03A, 0x000ED039, 0x000ED037, 0x000ED035, 0x000ED033, 0x000ED032, 0x000ED031, 0x000ED030, 0x000ED02F, 0x000ED02E, 0x000EA5B0, 0x000E94F1, 0x000E94DF, 0x000E4D6F, 0x000E0BA1, 0x000DD647, 0x000DD646, 0x000DD643, 0x000DC3AF, 0x000DB0C7, 0x000D9B6B, 0x000D9399, 0x000D91D1, 0x000D7773, 0x000D6F0B, 0x000D55D9, 0x000D2B4E, 0x000D2B09, 0x000C1E7A, 0x000C1E79, 0x000C1E78, 0x000C1E77, 0x000BC0A2, 0x000BA300, 0x000BA0BE, 0x000B1260, 0x000AD8DE, 0x000A0F46, 0x000940DD, 0x0006BE25, 0x00069007, 0x00068B5A, 0x0005437D, 0x00042396, 0x00024763, 0x00024737, 0x00023EE5, 0x00090E52, 0x00088FE8, 0x00088FE2, 0x00085D4E, 0x00083B3B, 0x00083B38, 0x00083B0B, 0x00083B08, 0x00083B05, 0x00083B04, 0x00083B01, 0x00083AFF, 0x00083AFD, 0x00083AFB, 0x00083AF6, 0x00083AEF, 0x00083AED, 0x00083AE8, 0x00083AE3, 0x0008316A, 0x00083169, 0x00083168, 0x0007F667, 0x0007EBC9, 0x0007EBC2, 0x0007EB9E, 0x0007EB03, 0x0007A508, 0x00077536, 0x000705C3, 0x00068253, 0x00066182, 0x00065C35, 0x00065BDA, 0x000557EC, 0x000403AF, 0x0003A06F, 0x00037DEA, 0x00026D85, 0x000E8BDB, 0x000E82BE, 0x000E7F3C, 0x000E7F3B, 0x000E7F39, 0x000E7F37, 0x000E7F34, 0x000E7F33, 0x000E7F31, 0x000E7EF0, 0x000E7A33, 0x000E3E69, 0x000E2FC6, 0x000E2FC5, 0x000E2513, 0x000E1A9F, 0x000E1647, 0x000E1640, 0x000E163F, 0x000E0D68, 0x000E0D67, 0x000E0D66, 0x000DDFB6, 0x000DDEFB, 0x000DD99C, 0x000DD998, 0x000DD125, 0x000DC198, 0x000DC176, 0x000DB0D7, 0x000D95E3, 0x000D674A, 0x000D672B, 0x000D672A, 0x000D670F, 0x000D3E6B, 0x000D397A, 0x000D3979, 0x000D3973, 0x000D30C8, 0x000D1955, 0x000D1246, 0x000D120C, 0x000D0E4E, 0x000D0BF6, 0x000D0969, 0x000D0968, 0x000D07B2, 0x000D0032, 0x000CEDA6, 0x000CE5BD, 0x000CC86A, 0x000CBA9B, 0x000CADEC, 0x000C58A6, 0x000C3B1A, 0x000C370E, 0x000C36EF, 0x000C2BE4, 0x000C2987, 0x000C1771, 0x000C084B, 0x000C0136, 0x000BD791, 0x000BD780, 0x000A4CE2, 0x00074ADF, 0x0003A523, 0x0009C8C6, 0x0009C8C2, 0x0009C8C1, 0x0009C8C0, 0x000993FC, 0x0009793A, 0x00097803, 0x00095129, 0x000931C2, 0x00090213, 0x0009020C, 0x0008AD99, 0x00085FE3, 0x00085FE2, 0x00072B13, 0x0006F63C, 0x0006DFAF, 0x0006DFAC, 0x0006DF94, 0x0006DF90, 0x0005C847, 0x0005C846, 0x00055549, 0x0004EF00, 0x00048782, 0x00037F8A, 0x00037F89, 0x00037F87, 0x0002A563, 0x000BC6FD, 0x000BB3D3, 0x000BABB4, 0x000B7736, 0x000B716A, 0x000B6D60, 0x000B64B1, 0x000B6426, 0x000B45F7, 0x000B3239, 0x000B3238, 0x000B3237, 0x000B3236, 0x000B3165, 0x000AE324, 0x000AD430, 0x000A2729, 0x000A2728, 0x000A2727, 0x000A2726, 0x000A2725, 0x000A2722, 0x000A2721, 0x000A2720, 0x000A271F, 0x000A271E, 0x000A271D, 0x000A271C, 0x000A271B, 0x000A271A, 0x000A2719, 0x000A2718, 0x000A2717, 0x000A2715, 0x000A2714, 0x000A2713, 0x000A2712, 0x000A2711, 0x000A270F, 0x000A270E, 0x000A270D, 0x000A270C, 0x000A270B, 0x000A270A, 0x000A2709, 0x000A2708, 0x000A2707, 0x000A2706, 0x000A2705, 0x000A2704, 0x000A2703, 0x000A2702, 0x000A2701, 0x000A2700, 0x000A26FF, 0x000A26FE, 0x000A26FD, 0x000A26FC, 0x000A26FB, 0x000A26FA, 0x000A26F9, 0x000A26F8, 0x000A26F7, 0x000A26F6, 0x000A26F2, 0x000A26F1, 0x000A26F0, 0x000A26EF, 0x000A26EE, 0x000A26ED, 0x000A26EC, 0x000A26EB, 0x000A26EA, 0x000A26E9, 0x000A26E8, 0x000A26E7, 0x000A26E6, 0x000A26E5, 0x000A26E4, 0x000A26E3, 0x000A26E2, 0x000A17B0, 0x000A0322, 0x0009F267, 0x0009E2AF, 0x0009E2AE, 0x0009E2AD, 0x0009E2AC, 0x0009E2AB, 0x0009E2AA, 0x0009E2A9, 0x0009E2A8, 0x0009E2A7, 0x0009DE3D, 0x0009DAC5, 0x0009DAC4, 0x0009DAC1, 0x0009DABE, 0x0009CD54, 0x0009CD53, 0x0009CD52, 0x0009CD51, 0x000973AC, 0x000951AE, 0x00094D8B, 0x00093CF6, 0x00093846, 0x0008F741, 0x0008E8FC, 0x0008E5DF, 0x0008B471, 0x0008ACD2, 0x0008ACD1, 0x0008ACD0, 0x0008ACCD, 0x0008ACCC, 0x0008AA46, 0x0008AA45, 0x00080D66, 0x00080D65, 0x00080D64, 0x00080D63, 0x00063A0F, 0x00086EFB, 0x00086EFA, 0x00086EF9, 0x00086EF8, 0x000813B6, 0x0007E5B8, 0x0007D67D, 0x0007D02F, 0x00078DD2, 0x00078621, 0x00078561, 0x00072841, 0x00072840, 0x0006CE1C, 0x00053347, 0x000749B5, 0x00071443, 0x00071442, 0x0006DEB6, 0x0006DEB5, 0x0006A80D, 0x0006851B, 0x00064EB2, 0x0005D2EA, 0x0005BF2E, 0x0005B9C9, 0x0005B49E, 0x00032E72, 0x000249AF, 0x000524DA, 0x0005224A, 0x00050502, 0x000504EF, 0x000504EE, 0x0004D249, 0x0004C6C8, 0x00027F74, 0x00027F73, 0x00048160, 0x0004811F, 0x00045F94, 0x0003DD30, 0x0003D29D, 0x0003BEB6, 0x00019514, 0x00015475, 0x0003636A, 0x0003AF29, 0x00039FC3, 0x00039F2A, 0x00039C8E, 0x00039654, 0x00035B65, 0x00034CBC, 0x00032785, 0x0003031F, 0x0003010B, 0x0003010A, 0x0002F83C, 0x0002F83B, 0x0002F83A, 0x0002F839, 0x0002F838, 0x0002F837, 0x0002F836, 0x00026EFE, 0x000211D7, 0x0001BFF5, 0x0001BB6D, 0x0001A332, 0x00019FEB, 0x00019FEA, 0x0002D513, 0x0002A96D, 0x00028ADC, 0x00026700, 0x00021683, 0x0001DBFE, 0x0001B27D, 0x0001B27A, 0x0001B276, 0x0001B274, 0x0001B273, 0x0001B272, 0x0001B26E, 0x0001B26D, 0x0001B26A, 0x0001B267, 0x0001B262, 0x0001B25E, 0x0001B25A, 0x0001B245, 0x0001B23C, 0x0001B23B, 0x0001B23A, 0x0001B239, 0x0001B238, 0x0001B237, 0x0001B236, 0x0001B233, 0x0001B22F, 0x0001B22E, 0x0001B22D, 0x0001B22C, 0x0001B22B, 0x0001B026, 0x0001B025, 0x0001B024, 0x0001B023, 0x0001B022, 0x0001B021, 0x0001B020, 0x0001B01F, 0x0001B01E, 0x0001B01D, 0x0001B01C, 0x0001B01B, 0x0001B01A, 0x0001B019, 0x0001B018, 0x0001B017, 0x0001B016, 0x0001B015, 0x0001B014, 0x0001B013, 0x0001B012, 0x0001B011, 0x0001B010, 0x0001B00F, 0x0001B00E, 0x0001B00D, 0x0001B00C, 0x0001B00B, 0x0001B00A, 0x0001B009, 0x0001B008, 0x0001B007, 0x0001B006, 0x0001B005, 0x0001B004, 0x0001B003, 0x0001B002, 0x0001B001, 0x0001B000, 0x0001AFFE, 0x0001AFFC, 0x0001AFFB, 0x0001AFFA, 0x0001AFF9, 0x0001AFF8, 0x0001AFF7, 0x0001AFF6, 0x0001AFF3, 0x0001AFF2, 0x0001AFF1, 0x0001AFF0, 0x0001AFEF, 0x0001AFEE, 0x0001AFED, 0x0001AFEC, 0x0001AFEB, 0x0001AFEA, 0x0001AFE9, 0x0001AFE8, 0x0001AFE7, 0x0001AFE6, 0x0001AFE5, 0x0001AFE4, 0x0001AFE3, 0x0001AFE2, 0x0001AFE0, 0x0001AFDF, 0x0001AFDE, 0x0001AFDD, 0x0001AFDC, 0x0001AFDB, 0x0001AFDA, 0x0001AFD9, 0x0001AFD8, 0x0001AFD7, 0x0001AFD6, 0x0001AFD5, 0x0001AFD4, 0x0001AFD3, 0x0001AFD2, 0x0001AFD1, 0x0001AFD0, 0x0001AFCF, 0x0001AFCE, 0x0001AFCD, 0x0001AFCC, 0x0001AFCB, 0x0001AFCA, 0x0001AFC9, 0x0001AFC8, 0x0001AFC7, 0x0001AFC6, 0x0001AFC5, 0x0001AFC4, 0x0001AFC3, 0x0001AFC2, 0x0001AFC1, 0x0001AFC0, 0x0001AFBF, 0x0001AFBA, 0x0001AFB3, 0x0001AFB2, 0x0001AFB1, 0x0001AF94, 0x0001AF93, 0x0001AF91, 0x0001AF90, 0x0001AF8F, 0x0001AF8E, 0x0001AF8D, 0x0001AF8C, 0x0001AF8B, 0x0001AF8A, 0x0001AF40, 0x0001ADB4, 0x0001AD18, 0x0001AD17, 0x0001AD16, 0x0001AD15, 0x0001AD14, 0x0001AD13, 0x0001AD12, 0x0001AD11, 0x0001AD0F, 0x0001AD0E, 0x0001AD0D, 0x0001AD0C, 0x0001AD0A, 0x0001AD09, 0x0001AD08, 0x0001AD07, 0x0001AD06, 0x0001AD05, 0x0001AD04, 0x0001AD03, 0x0001ACFF, 0x0001ACFE, 0x0001ACFD, 0x0001ACFC, 0x0001ACFB, 0x0001ACFA, 0x0001ACF7, 0x0001ACF5, 0x0001ACF4, 0x0001ACF3, 0x0001ACF2, 0x0001ACF1, 0x0001ACF0, 0x0001ACEF, 0x0001ACED, 0x0001ACEC, 0x0001ACEB, 0x0001ACEA, 0x0001ACE9, 0x0001ACE8, 0x0001ACE7, 0x0001ACE6, 0x0001ACE5, 0x0001ACE4, 0x0001ACE3, 0x0001ACE2, 0x0001ACE1, 0x0001ACDF, 0x0001ACDD, 0x0001ACDC, 0x0001ACDB, 0x0001ACDA, 0x0001ACD9, 0x0001ACD8, 0x0001ACD7, 0x0001ACD6, 0x0001ACD5, 0x0001ACD4, 0x0001ACD3, 0x0001ACD2, 0x0001ACD1, 0x0001ACCD, 0x0001ACCB, 0x0001ACC9, 0x0001ACC8, 0x0001ACC7, 0x0001ACC6, 0x0001ACBC, 0x0001ACBB, 0x0001ACBA, 0x0001ACB9, 0x0001ACB8, 0x0001ACB7, 0x0001ACB6, 0x0001ACB5, 0x00016FFF, 0x00016FFE, 0x0010FC28, 0x0010FC27, 0x0010FC26, 0x0010F570, 0x0010E039, 0x0010F75F, 0x0010EB65, 0x0010EB64, 0x0010EB63, 0x0010EB62, /*0x0010EB5E, 0x0010EB5D, 0x0010EB5C, 0x0010EB5B,*/ 0x0010E2DC, 0x0010E2D8, 0x0010E2CE, 0x0010DFCD, 0x0010DFCC, 0x0010DFCB, 0x0010DFCA, 0x0010DFC9, 0x0010DFC8, 0x0010DFC7, 0x0010DFC6, 0x0010DFC5, 0x0010DFC1, 0x0010DFC0, 0x0010DFBF, 0x0010DFBE, 0x0010DFBD, 0x0010DFBC, 0x0010DFBB, 0x0010DFBA, 0x0010DFB9, 0x0010DFB8, 0x0010DFB7, 0x0010DFB6, 0x0010DFB5, 0x0010DFB4, 0x0010DFB3, 0x0010DFB2, 0x0010DFB1, 0x0010DFB0, 0x0010DFAF, 0x0010DFAE, 0x0010DFAD, 0x0010DFAC, 0x0010DFAB, 0x0010DFAA, 0x0010DFA9, 0x0010DFA8, 0x0010DFA7, 0x0010DFA6, 0x0010DFA5, 0x0010DFA4, 0x0010DFA3, 0x0010DFA2, 0x0010DFA1, 0x0010DFA0, 0x0010DF9F, 0x0010DF9E, 0x0010DF9D, 0x0010DF9C, 0x0010DF9B, 0x0010DF9A, 0x0010DF99, 0x0010DF98, 0x0010DF97, 0x0010DF96, 0x0010DF95, 0x0010DF94, 0x0010DF93, 0x0010DF92, 0x0010DF91, 0x0010DF90, 0x0010DF8F, 0x0010DF8E, 0x0010DF8D, 0x0010DF8C, 0x0010DF8B, 0x0010DF8A, 0x0010DF89, 0x0010DF88, 0x0010DF87, 0x0010DF86, 0x0010DF85, 0x0010DF84, 0x0010DF83, 0x0010DF82, 0x0010DF81, 0x0010DF80, 0x0010DF7F, 0x0010DF7E, 0x0010DF7D, 0x0010DF7C, 0x0010DF7B, 0x0010DF7A, 0x0010DF79, 0x0010DF78, 0x0010DF77, 0x0010DF76, 0x0010DF75, 0x0010DF74, 0x0010DF73, 0x0010DF72, 0x0010DF71, 0x0010DF70, 0x0010DF6F, 0x0010DF6E, 0x0010DF67, 0x0010DF5E, 0x0010DF5D, 0x0010DF5C, 0x0010DF5B, 0x0010DF5A, 0x0010DF59, 0x0010DF58, 0x0010DF57, 0x0010DF56, 0x0010DF55, 0x0010DF54, 0x0010DF53, 0x0010DF52, 0x0010DF51, 0x0010DF50, 0x0010DF4F, 0x0010DF4E, 0x0010DF4D, 0x0010DF4C, 0x0010DF4B, 0x0010DF4A, 0x0010DF49, 0x0010DF48, 0x0010DF47, 0x0010DF46, 0x0010DF45, 0x0010DF44, 0x0010DF43, 0x0010DF42, 0x0010DF41, 0x0010DF40, 0x0010DF3F, 0x0010DF3E, 0x0010DF3D, 0x0010DF3C, 0x0010DF3B, 0x0010DF3A, 0x0010DF39, 0x0010DF38, 0x0010DF37, 0x0010DF36, 0x0010DF35, 0x0010DF34, 0x0010DF33, 0x0010DF32, 0x0010DF31, 0x0010DF30, 0x0010DF2F, 0x0010DF2E, 0x0010DF2D, 0x0010DF2C, 0x0010DF2B, 0x0010DF2A, 0x0010DF29, 0x0010DF28, 0x0010DF27, 0x0010DF26, 0x0010DF25, 0x0010DF24, 0x0010DF23, 0x0010DF22, 0x0010DF21, 0x0010DF20, 0x0010DF1F, 0x0010DF1E, 0x0010DF1D, 0x0010DF1C, 0x0010DF1B, 0x0010DF1A, 0x0010DF19, 0x0010DF18, 0x0010DF17, 0x0010DF16, 0x0010DF15, 0x0010DF14, 0x0010DF13, 0x0010DF12, 0x0010DF11, 0x0010DF10, 0x0010DF0F, 0x0010DF0E, 0x0010DF0D, 0x0010DF0C, 0x0010DF0B, 0x0010DF0A, 0x0010DF09, 0x0010DF08, 0x0010DF07, 0x0010DF06, 0x0010DF05, 0x0010DF04, 0x0010DF03, 0x0010DF02, 0x0010DF01, 0x0010DF00, 0x0010DEFF, 0x0010DEFE, 0x0010DEFD, 0x0010DEFC, 0x0010DEFB, 0x0010DEFA, 0x0010DEF9, 0x0010DEF8, 0x0010DEF7, 0x0010DEF6, 0x0010DEF5, 0x0010DEF4, 0x0010DEF3, 0x0010DEF2, 0x0010DEF1, 0x0010DEF0, 0x0010DEEF, 0x0010DEEE, 0x0010DEED, 0x0010DEEC, 0x0010DEEB, 0x0010DEEA, 0x0010DEE9, 0x0010DEE8, 0x0010DEE7, 0x0010DEE6, 0x0010DEE5, 0x0010DEE4, 0x0010DEE3, 0x0010DEE2, 0x0010DEE1, 0x0010DEE0, 0x0010DEDF, 0x0010DEDE, 0x0010DEDD, 0x0010DEDC, 0x0010DEDB, 0x0010DEDA, 0x0010DED9, 0x0010DED8, 0x0010DED7, 0x0010DED6, 0x0010DED5, 0x0010DED4, 0x0010DED3, 0x0010DED2, 0x0010DED1, 0x0010DED0, 0x0010DECF, 0x0010DECE, 0x0010DECD, 0x0010DECC, 0x0010DECB, 0x0010DECA, 0x0010DEC9, 0x0010DEC8, 0x0010DEC7, 0x0010DEC6, 0x0010DEC5, 0x0010DD3C, 0x0010DD3B, 0x0010DD3A, 0x0010D6A7, 0x0010D6A6, 0x0010D6A5, 0x0010D6A4, 0x0010D691, 0x0010D684, 0x0010D683, 0x0010D682, 0x0010D681, 0x0010D680, 0x0010D67F, 0x0010D67E, 0x0010D67D, 0x0010D67C, 0x0010D67B, 0x0010D67A, 0x0010D679, 0x0010D678, 0x0010D677, 0x0010D676, 0x0010D675, 0x0010D674, 0x0010D673, 0x0010D672, 0x0010D671, 0x0010D670, 0x0010D66F, 0x0010D66E, 0x0010D66D, 0x0010D66C, 0x0010D66B, 0x0010D66A, 0x0010D669, 0x0010D668, 0x0010D667, 0x0010D664, 0x0010D662, 0x0010D2B5, 0x0010D2B4, 0x0010CFF2, 0x0010CFF1, 0x0010CFF0, 0x0010CFEF, 0x0010CFEC, 0x0010CFEB, 0x0010CFEA, 0x0010CFE4, 0x0010CFD6, 0x0010CFD5, 0x0010CFD4, 0x0010CFD3, 0x0010CFD2, 0x0010CFD1, 0x0010CFD0, 0x0010CFCF, 0x0010CFCE, 0x0010CFCD, 0x0010CFCC, 0x0010CFCB, 0x0010CFCA, 0x0010CFC9, 0x0010CFC8, 0x0010CFC7, 0x0010CFC6, 0x0010CFC5, 0x0010CFC4, 0x0010CFC3, 0x0010CFC2, 0x0010CFC1, 0x0010CFC0, 0x0010CFBF, 0x0010CFBE, 0x0010CFBD, 0x0010CFBC, 0x0010CFBB, 0x0010CFBA, 0x0010CFB9, 0x0010CFB8, 0x0010CFB6, 0x0010CFB5, 0x0010CFB4, 0x0010CFB3, 0x0010CFB2, 0x0010CFB1, 0x0010CFB0, 0x0010CFAF, 0x0010CFAE, 0x0010CFAD, 0x0010CFAC, 0x0010CFAB, 0x0010CFAA, 0x0010CFA9, 0x0010CFA8, 0x0010CFA7, 0x0010CFA6, 0x0010CFA5, 0x0010CFA4, 0x0010CFA3, 0x0010CFA2, 0x0010CFA1, 0x0010CFA0, 0x0010CF9F, 0x0010CF9E, 0x0010CF9D, 0x0010CF9C, 0x0010CF9B, 0x0010CF9A, 0x0010CF99, 0x0010CF98, 0x0010CF97, 0x0010CF96, 0x0010CF95, 0x0010CF94, 0x0010CF93, 0x0010CF92, 0x0010CF91, 0x0010CF90, 0x0010CF8F, 0x0010CF8E, 0x0010CF8D, 0x0010CF8C, 0x0010CF8B, 0x0010CF8A, 0x0010CF89, 0x0010CF88, 0x0010CF87, 0x0010CF86, 0x0010CF85, 0x0010CF84, 0x0010CF83, 0x0010CF82, 0x0010CF81, 0x0010CF80, 0x0010CF7F, 0x0010CF7E, 0x0010CF7D, 0x0010CF7C, 0x0010CF7B, 0x0010CF7A, 0x0010CF79, 0x0010CF78, 0x0010CF77, 0x0010CF76, 0x0010CF75, 0x0010CF74, 0x0010CF73, 0x0010CF72, 0x0010CF71, 0x0010CF70, 0x0010CF6F, 0x0010CF6E, 0x0010CF6D, 0x0010CF6C, 0x0010CF6B, 0x0010CF6A, 0x0010CF69, 0x0010CF68, 0x0010CF67, 0x0010CF66, 0x0010CF65, 0x0010CF64, 0x0010CF63, 0x0010CF62, 0x0010CF61, 0x0010CF60, 0x0010CF5F, 0x0010CF5E, 0x0010CF5D, 0x0010CF5C, 0x0010CF5B, 0x0010CF5A, 0x0010CF59, 0x0010CF58, 0x0010CF57, 0x0010CF56, 0x0010CF55, 0x0010CF54, 0x0010CF53, 0x0010CF52, 0x0010CF51, 0x0010CF50, 0x0010CF4F, 0x0010CF4E, 0x0010CF4D, 0x0010CF4C, 0x0010CF4B, 0x0010CF4A, 0x0010CF49, 0x0010CF48, 0x0010CF47, 0x0010CF46, 0x0010CF45, 0x0010CF44, 0x0010CF43, 0x0010CF42, 0x0010CF41, 0x0010CF40, 0x0010CF3F, 0x0010CF3E, 0x0010CF3D, 0x0010CF3C, 0x0010CF3B, 0x0010CF3A, 0x0010CF39, 0x0010CF38, 0x0010CF37, 0x0010CF36, 0x0010CF35, 0x0010CF34, 0x0010CF33, 0x0010CF32, 0x0010CF31, 0x0010CF30, 0x0010CEE8, 0x0010CEE6, 0x0010CEE5, 0x0010CEE4, 0x0010CEE3, 0x0010C698, 0x0010B300, 0x0010B2FF, 0x0010B2FD, 0x0010A06A, 0x00109C3D, 0x00109C11, 0x001092B6, 0x001092B5, 0x001092B4, 0x00109089, 0x00109088, 0x00109087, 0x00109086, 0x00109085, 0x00109084, 0x00109083, 0x00109082, 0x00109081, 0x00109080, 0x00109066, 0x00109065, 0x00109064, 0x00109063, 0x00109062, 0x00109061, 0x0010905A, 0x00109059, 0x00109058, 0x00109057, 0x00109056, 0x00109055, 0x00109054, 0x00109053, 0x00109052, 0x00109051, 0x00109050, 0x0010904F, 0x0010904E, 0x0010904D, 0x0010904C, 0x0010904B, 0x0010904A, 0x00109049, 0x00109048, 0x00109047, 0x00109046, 0x00109045, 0x0010902B, 0x0010902A, 0x00109029, 0x00109028, 0x00109027, 0x00109026, 0x00109025, 0x00109024, 0x00109023, 0x00109022, 0x00109021, 0x00109020, 0x00109019, 0x00109018, 0x00109017, 0x00109016, 0x00109015, 0x00109014, 0x00109013, 0x00109012, 0x00109011, 0x00109010, 0x0010900F, 0x0010900E, 0x0010900D, 0x0010900C, 0x0010900B, 0x0010900A, 0x00109009, 0x00109008, 0x00108546, 0x00108545, 0x00108544, 0x00108543, 0x00108542, 0x00108541, 0x00108540, 0x0010853F, 0x00107E2D, 0x00107611, 0x0010710D, 0x0010710C, 0x0010710B, 0x0010710A, 0x00107109, 0x00107108, 0x00107106, 0x00106661, 0x00106392, 0x00106390, 0x00105F14, 0x00105F13, 0x00105F12, 0x00105F11, 0x00105EF0, 0x00105969, 0x00105968, 0x00105967, 0x00105966, 0x0010594F, 0x0010594D, 0x0010594B, 0x0010559D, 0x0010524F, 0x00103941, 0x001019CD, 0x001019CC, 0x001019CB, 0x001019CA, 0x001017B6, 0x001017B5, 0x001017B4, 0x001017B3, 0x001017B2, 0x001017B1, 0x001017B0, 0x001017AF, 0x001017AE, 0x001017AD, 0x001017AC, 0x001017A5, 0x001017A4, 0x001017A3, 0x001017A2, 0x001017A1, 0x001017A0, 0x0010179F, 0x0010179E, 0x0010179D, 0x00101783, 0x00101782, 0x00101781, 0x00101780, 0x0010177F, 0x0010177E, 0x0010177D, 0x0010177C, 0x0010177B, 0x0010177A, 0x00101779, 0x00101778, 0x00101777, 0x0010175D, 0x0010175C, 0x0010175B, 0x0010175A, 0x00101759, 0x00101758, 0x00101757, 0x00101756, 0x00101755, 0x00101754, 0x00101753, 0x00101752, 0x00101751, 0x00101750, 0x00101749, 0x00101748, 0x00101747, 0x00101746, 0x00101745, 0x00101744, 0x00101743, 0x00101742, 0x00101741, 0x00101740, 0x0010173F, 0x0010173E, 0x0010173D, 0x0010173C, 0x0010173B, 0x0010173A, 0x00101739, 0x00101738, 0x00101737, 0x00100E84, 0x00100E7B, 0x00100E65, 0x00100E64, 0x00100E5F, 0x00100E5C, 0x00100E5B, 0x00100E5A, 0x00100E59, 0x00100E58, 0x00100E57, 0x00100E56, 0x00100E55, 0x00100E54, 0x00100E53, 0x00100E52, 0x00100E51, 0x00100E50, 0x00100E4F, 0x00100E4E, 0x00100E4D, 0x00100E4C, 0x00100E45, 0x00100E44, 0x00100E43, 0x00100E42, 0x00100E41, 0x00100E40, 0x00100E3F, 0x00100E3E, 0x00100E3D, 0x00100E3C, 0x00100E3B, 0x00100E3A, 0x00100E39, 0x00100E38, 0x00100E37, 0x00100E36, 0x00100E35, 0x00100E34, 0x00100E33, 0x00100E32, 0x00100E31, 0x00100E30, 0x00100E2F, 0x00100E2E, 0x00100E2D, 0x00100E2C, 0x00100E2B, 0x00100E2A, 0x00100E29, 0x00100E28, 0x00100E27, 0x00100E26, 0x00100E25, 0x00100E24, 0x00100E23, 0x00100E22, 0x00100E21, 0x00100E20, 0x00100E1F, 0x00100E1E, 0x00100E1D, 0x00100E1C, 0x00100E1B, 0x00100E1A, 0x00100E19, 0x00100E18, 0x00100E17, 0x00100E16, 0x00100E15, 0x00100E14, 0x00100E13, 0x00100E12, 0x00100E11, 0x00100E10, 0x00100E0F, 0x00100E0E, 0x00100E0D, 0x00100E0C, 0x00100E0B, 0x00100E04, 0x00100E03, 0x00100E02, 0x00100E01, 0x00100E00, 0x00100DFF, 0x00100DFE, 0x00100DFD, 0x00100DFC, 0x00100DFB, 0x00100DFA, 0x00100DF9, 0x00100DF8, 0x00100DF7, 0x00100DF6, 0x00100DF5, 0x00100DF4, 0x00100DF3, 0x00100DF2, 0x00100DF1, 0x00100DF0, 0x00100DEF, 0x00100DEE, 0x000FF7DE, 0x000FF7D7, 0x000FF7D6, 0x000FF7D5, 0x000FF7D4, 0x000FF7D3, 0x000FF7D2, 0x000FE303, 0x000FE302, 0x000FE301, 0x000FE300, 0x000FE2FF, 0x000FE2FE, 0x000FE2FD, 0x000FE2FC, 0x000FE2FB, 0x000FE2FA, 0x000FE2F9, 0x000FE2F8, 0x000FE2F7, 0x000FE2F6, 0x000FE2F5, 0x000FE2F4, 0x000FE2F3, 0x000FE2F2, 0x000FE2F1, 0x000FE2F0, 0x000FE2EF, 0x000FE2EE, 0x000FE2ED, 0x000FE2EC, 0x000FE2EB, 0x000FE2EA, 0x000FE2E9, 0x000FE2E8, 0x000FE2E7, 0x000FE2E6, 0x000FE2E5, 0x000FE2E4, 0x000FE2E3, 0x000FE2E2, 0x000FE2E1, 0x000FE2E0, 0x000FE2DF, 0x000FE2DE, 0x000FE2DD, 0x000FE2DC, 0x000FE2DB, 0x000FE2DA, 0x000FE2D9, 0x000FE2D8, 0x000FE2D7, 0x000FDEAF, 0x000FDA1F, 0x000FDA1E, 0x000FDA1D, 0x000FDA1C, 0x000FDA1B, 0x000FDA1A, 0x000FDA06, 0x000FDA05, 0x000FCF02, 0x000FCF01, 0x000FCF00, 0x000FCEFF, 0x000FCEFE, 0x000FCEFD, 0x000FCEFC, 0x000FCEFB, 0x000FCEFA, 0x000FCEF9, 0x000FCEF8, 0x000FCEF7, 0x000FCEF6, 0x000FCEF5, 0x000FCEF4, 0x000FCEF3, 0x000FCEF2, 0x000FCEF1, 0x000FCC13, 0x000FCC12, 0x000FCC11, 0x000FCC10, 0x000FCC0F, 0x000FCC0E, 0x000FCC0D, 0x000FCC0C, 0x000FC5BF, 0x000FC067, 0x000FC066, 0x000FC065, 0x000FC064, 0x000FC063, 0x000FC062, 0x000FC061, 0x000FC05A, 0x000FC059, 0x000FC058, 0x000FC057, 0x000FC056, 0x000FC055, 0x000FC054, 0x000FC053, 0x000FC052, 0x000FC051, 0x000FC050, 0x000FC04F, 0x000FC04E, 0x000FC04D, 0x000FC04C, 0x000FC04B, 0x000FC04A, 0x000FC049, 0x000FC048, 0x000FC047, 0x000FC046, 0x000FC045, 0x000FC044, 0x000FC043, 0x000FC03D, 0x000FC03C, 0x000FC03B, 0x000FC03A, 0x000FC039, 0x000FC038, 0x000FC037, 0x000FC036, 0x000FC035, 0x000FC034, 0x000FC033, 0x000FC032, 0x000FC031, 0x000FC030, 0x000FC02F, 0x000FC02E, 0x000FC02D, 0x000FC02C, 0x000FC02B, 0x000FC02A, 0x000FC029, 0x000FC028, 0x000FC027, 0x000FC026, 0x000FC025, 0x000FC024, 0x000FC023, 0x000FC022, 0x000FC021, 0x000FC020, 0x000FC01F, 0x000FC01E, 0x000FC017, 0x000FC016, 0x000FC015, 0x000FC014, 0x000FC013, 0x000FC012, 0x000FC011, 0x000FC010, 0x000FC00F, 0x000FC00E, 0x000FC00D, 0x000FC00C, 0x000FC00B, 0x000FC00A, 0x000FC009, 0x000FC008, 0x000FC007, 0x000FC006, 0x000FC005, 0x000FC004, 0x000FC003, 0x000FC002, 0x000FC001, 0x000FC000, 0x000FB97B, 0x000FB979, 0x000F9904, 0x000F9670, 0x000F9649, 0x000F8715, 0x000F8713, 0x000F82FE, 0x000F71DF, 0x000F6F24, 0x000F6F23, 0x000F6F22, 0x000F6F21, 0x000F6911, 0x000F6910, 0x000F690F, 0x000F690E, 0x000F690D, 0x000F6904, 0x000F5A1D, 0x000F5A1C, 0x000F5981, 0x000F494E, 0x000F1B33, 0x000F1B31, 0x000F1B30, 0x000F1B2F, 0x000F1B2E, 0x000F1B2D, 0x000F1B2C, 0x000F1AC0, 0x000F1ABE, 0x000F1ABD, 0x000F1229, 0x000F1186, 0x000EE5C0, 0x000EC8B1, 0x000EAFD3, 0x000EAFD2, 0x000EAFD1, 0x000EAFD0, 0x000EAD49, 0x000E9EB5, 0x000E84C6, 0x000E84C4, 0x000E84C1, 0x000E0BA2, 0x000D9394, 0x000D8482, 0x000D5047, 0x000D4FF7, 0x000D3ACE, 0x000D3ACD, 0x000D3ACC, 0x000D3ACB, 0x000D3AC5, 0x000D3AC4, 0x000D3AC3, 0x000D3AC2, 0x000C7F5C, 0x000C7F5B, 0x000C72E8, 0x000C3CE6, 0x000BFA0A, 0x000B83CF, 0x000B83CD, 0x000B83CB, 0x000B1460, 0x000B145B, 0x000B144D, 0x00097A43, 0x000940D5, 0x00093A61, 0x0006901D, 0x0004C3D0, 0x0004C3CB, 0x00040975, 0x00016731, 0x00016730, 0x0001672F, 0x0001671A, 0x00016719, 0x000166FF, 0x000166FE, 0x000166FD, 0x000166E0, 0x000166D6, 0x00090E32, 0x0007EAF1, 0x00079BE4, 0x0006FF45, 0x0006FF43, 0x0006FF38, 0x0006FF37, 0x0006FE72, 0x0006F39E, 0x0006F39B, 0x0006F398, 0x0006F393, 0x0006C1DA, 0x0006C1D9, 0x0006C1D8, 0x00064B71, 0x0006492E, 0x0006492D, 0x0006492C, 0x0006492A, 0x00064796, 0x000646AB, 0x000646A7, 0x00062311, 0x0006230B, 0x00062303, 0x00061CD6, 0x00061CCA, 0x00061CC9, 0x00061CC2, 0x00061CC1, 0x00061CC0, 0x00061CB9, 0x00061CAB, 0x00061CA5, 0x00061C8B, 0x0005D009, 0x0005D008, 0x0005ABC4, 0x0005ABC3, 0x0005A9E3, 0x0005A9DF, 0x00047CBE, 0x00046DF0, 0x00046DEF, 0x00046DEE, 0x00046DED, 0x00046DE2, 0x00046DD9, 0x00046DD3, 0x00046DCB, 0x00046DCA, 0x00046DC7, 0x00046DC4, 0x00046DC3, 0x00046DC2, 0x00046DB5, 0x00046DB4, 0x00046DB3, 0x00046DB2, 0x00046DB1, 0x00046D21, 0x00046D20, 0x00046D1F, 0x00046D1A, 0x00046CF8, 0x00046CF7, 0x00046CF6, 0x00046CF5, 0x00046CF4, 0x00046CF3, 0x00046CEA, 0x00046CDA, 0x00046C9E, 0x00046C80, 0x00046C7F, 0x00046C7D, 0x00046C7C, 0x00046C7A, 0x00046C79, 0x00046BEB, 0x00046BEA, 0x00046BE9, 0x00046BE8, 0x00046BE7, 0x00046BE6, 0x00046BD2, 0x00046BD1, 0x00046BD0, 0x00046BB9, 0x00046BB8, 0x00046BB7, 0x00046BB6, 0x00046BB5, 0x00046BB4, 0x000467C0, 0x000467BF, 0x000403A9, 0x0002D773, 0x0002D75A, 0x0002D753, 0x0002D74F, 0x00021622, 0x0002161F, 0x0002161D, 0x0002161B, 0x00021619, 0x00021615, 0x00021613, 0x00021525, 0x00021522, 0x00021520, 0x0002151E, 0x0002150D, 0x00021508, 0x00021507, 0x000214F7, 0x000214F4, 0x000214F1, 0x000214EF, 0x000214ED, 0x000214EB, 0x000214E0, 0x000214DC, 0x000214BA, 0x00015516, 0x000E80A8, 0x000E739B, 0x000E41D8, 0x000E40DF, 0x000E40DE, 0x000E35EA, 0x000E35E9, 0x000E35E8, 0x000E35E7, 0x000E35DF, 0x000E35DD, 0x000E35DC, 0x000E35DB, 0x000E35DA, 0x000E35D9, 0x000E35D8, 0x000E35D7, 0x000E35D6, 0x000E1F17, 0x000E1F16, 0x000E1F15, 0x000E1F14, 0x000E1643, 0x000E0DD4, 0x000E0DD2, 0x000E0DD0, 0x000DB5D0, 0x000DA750, 0x000D8D55, 0x000D8D52, 0x000D8D50, 0x000D8D4E, 0x000D7AF9, 0x000D7AF8, 0x000D7AF7, 0x000D7AF6, 0x000D7AF5, 0x000D7AF4, 0x000D7AF3, 0x000D7AF2, 0x000D7AF1, 0x000D7AF0, 0x000D7AEF, 0x000D7AEE, 0x000D7AED, 0x000D7AEC, 0x000D7AEB, 0x000D7AEA, 0x000D7AE9, 0x000D7AE8, 0x000D7AE7, 0x000D7AE6, 0x000D7AE5, 0x000D7AE4, 0x000D7AE3, 0x000D7AE2, 0x000D7AE1, 0x000D7ADD, 0x000D7ADC, 0x000D7ADB, 0x000D7ADA, 0x000D7AD9, 0x000D7AD8, 0x000D7AD7, 0x000D7AD6, 0x000D7AD5, 0x000D7AD4, 0x000D7AD3, 0x000D7AD2, 0x000D7AD1, 0x000D7AD0, 0x000D7ACF, 0x000D7ACE, 0x000D7ACD, 0x000D7ACC, 0x000D7AC8, 0x000D7AC7, 0x000D7AC6, 0x000D7AC5, 0x000D7AC4, 0x000D7AC3, 0x000D7AB0, 0x000D7AAF, 0x000D7AAE, 0x000D7A9D, 0x000D7A9C, 0x000D7A9B, 0x000D7A9A, 0x000D7A99, 0x000D7A98, 0x000D7A97, 0x000D7A96, 0x000D7A95, 0x000D7A94, 0x000D7A93, 0x000D7A92, 0x000D7A91, 0x000D7A90, 0x000D7A8F, 0x000D7A8E, 0x000D7A8D, 0x000D7A8C, 0x000D7A8B, 0x000D7A8A, 0x000D7A89, 0x000D7A88, 0x000D7A87, 0x000D7A86, 0x000D7A85, 0x000D7A84, 0x000D7A83, 0x000D7A82, 0x000D7A81, 0x000D7A80, 0x000D7A7F, 0x000D7A7E, 0x000D7A7D, 0x000D7A7C, 0x000D7A7B, 0x000D7A7A, 0x000D7A79, 0x000D7A78, 0x000D7A77, 0x000D7A76, 0x000D7A75, 0x000D7A74, 0x000D7A73, 0x000D7A72, 0x000D7A71, 0x000D7A70, 0x000D7A6F, 0x000D7A6B, 0x000D7A6A, 0x000D7A69, 0x000D7A68, 0x000D7A67, 0x000D7A66, 0x000D7A65, 0x000D7A64, 0x000D7A63, 0x000D7A62, 0x000D7A61, 0x000D7A60, 0x000D7A5F, 0x000D7A5E, 0x000D7A5D, 0x000D7A5C, 0x000D7A5B, 0x000D7A5A, 0x000D7A56, 0x000D7A55, 0x000D7A54, 0x000D7A53, 0x000D7A52, 0x000D7A51, 0x000D7A3E, 0x000D7A3D, 0x000D7A3C, 0x000D7A2B, 0x000D7A2A, 0x000D7A29, 0x000D7A28, 0x000D7A27, 0x000D7A26, 0x000D7A25, 0x000D7A24, 0x000D7A23, 0x000D7A22, 0x000D7A21, 0x000D7A20, 0x000D7A1F, 0x000D7A1E, 0x000D7A1D, 0x000D7A1C, 0x000D7A1B, 0x000D7A1A, 0x000D7A19, 0x000D7A18, 0x000D7A17, 0x000D7A16, 0x000D7A15, 0x000D7A14, 0x000D7A13, 0x000D7A12, 0x000D7A11, 0x000D7A10, 0x000D7A0F, 0x000D7A0E, 0x000D7A0D, 0x000D7A0C, 0x000D7A0B, 0x000D7A0A, 0x000D7A09, 0x000D7A08, 0x000D7A07, 0x000D7A06, 0x000D7A05, 0x000D7A04, 0x000D7A03, 0x000D79FF, 0x000D79FE, 0x000D79FD, 0x000D79FC, 0x000D79FB, 0x000D79FA, 0x000D79F9, 0x000D79F8, 0x000D79F7, 0x000D79F6, 0x000D79F5, 0x000D79F4, 0x000D79F3, 0x000D79F2, 0x000D79F1, 0x000D79F0, 0x000D79EF, 0x000D79EE, 0x000D79EA, 0x000D79E9, 0x000D79E8, 0x000D79E7, 0x000D79E6, 0x000D79E5, 0x000D79D2, 0x000D79D1, 0x000D79D0, 0x000D79BF, 0x000D79BE, 0x000D79BD, 0x000D79BC, 0x000D79BB, 0x000D79BA, 0x000D79B3, 0x000D79B2, 0x000D79B1, 0x000D79B0, 0x000D79AF, 0x000D79AE, 0x000D79AD, 0x000D79AC, 0x000D79AB, 0x000D79AA, 0x000D79A9, 0x000D79A8, 0x000D79A7, 0x000D53FA, 0x000D53F9, 0x000D53F8, 0x000D53F7, 0x000D53F6, 0x000D53F5, 0x000D53F4, 0x000D53F3, 0x000D53F2, 0x000D53F1, 0x000D53F0, 0x000D53EF, 0x000D53EE, 0x000D53ED, 0x000D53EC, 0x000D53EB, 0x000D53EA, 0x000D53E9, 0x000D53E8, 0x000D53E7, 0x000D53E6, 0x000D53E5, 0x000D53E4, 0x000D53E3, 0x000D53E2, 0x000D53E1, 0x000D53E0, 0x000D53DF, 0x000D53DE, 0x000D53DD, 0x000D53DC, 0x000D53DB, 0x000D53DA, 0x000D53D9, 0x000D53D8, 0x000D53D7, 0x000D53D6, 0x000D53D5, 0x000D53D4, 0x000D53D3, 0x000D53D2, 0x000D53D1, 0x000D53D0, 0x000D53CF, 0x000D53CE, 0x000D53CD, 0x000D53C9, 0x000D53C8, 0x000D53C7, 0x000D53C6, 0x000D53C5, 0x000D53C4, 0x000D53C3, 0x000D53C2, 0x000D53C1, 0x000D53C0, 0x000D53BF, 0x000D53BE, 0x000D53BD, 0x000D53BC, 0x000D53BB, 0x000D53B7, 0x000D53B6, 0x000D53B5, 0x000D53B1, 0x000D53B0, 0x000D53AF, 0x000D53AE, 0x000D53AD, 0x000D53AC, 0x000D5399, 0x000D5398, 0x000D5397, 0x000D5386, 0x000D5385, 0x000D5384, 0x000D5383, 0x000D5382, 0x000D5381, 0x000D537A, 0x000D5379, 0x000D5378, 0x000D5377, 0x000D5376, 0x000D5375, 0x000D5374, 0x000D5373, 0x000D5372, 0x000D5371, 0x000D5370, 0x000D536F, 0x000D536E, 0x000D3EAB, 0x000D3EAA, 0x000D3EA7, 0x000D3EA0, 0x000D3DEA, 0x000D3DE9, 0x000D3DE8, 0x000D3BDB, 0x000D2846, 0x000D2845, 0x000D2844, 0x000D2843, 0x000D2842, 0x000D2328, 0x000D1F3B, 0x000D1921, 0x000D191F, 0x000CF8B3, 0x000CF8B2, 0x000CF8B1, 0x000CF8B0, 0x000CF8A9, 0x000CF8A1, 0x000CF8A0, 0x000CF89F, 0x000CF898, 0x000CF897, 0x000CF896, 0x000CF895, 0x000CF894, 0x000CF893, 0x000CF892, 0x000CF891, 0x000CF890, 0x000CF88F, 0x000CF88E, 0x000CF88D, 0x000CF88C, 0x000CF88B, 0x000CF88A, 0x000CF889, 0x000CF888, 0x000CF887, 0x000CF886, 0x000CF885, 0x000CF884, 0x000CF883, 0x000CF882, 0x000CF881, 0x000CF880, 0x000CF87C, 0x000CF87B, 0x000CF87A, 0x000CF879, 0x000CF878, 0x000CF877, 0x000CF876, 0x000CF875, 0x000CF874, 0x000CF873, 0x000CF872, 0x000CF871, 0x000CF870, 0x000CF86F, 0x000CF86E, 0x000CF86D, 0x000CF86C, 0x000CF86B, 0x000CF867, 0x000CF866, 0x000CF865, 0x000CF864, 0x000CF863, 0x000CF862, 0x000CF84F, 0x000CF84E, 0x000CF84D, 0x000CF83C, 0x000CF83B, 0x000CF83A, 0x000CF839, 0x000CF838, 0x000CF837, 0x000CF830, 0x000CF82F, 0x000CF82E, 0x000CF82D, 0x000CF82C, 0x000CF82B, 0x000CF82A, 0x000CF829, 0x000CF828, 0x000CF827, 0x000CF826, 0x000CF825, 0x000CF824, 0x000CF823, 0x000CF822, 0x000CF821, 0x000CF81F, 0x000CF81E, 0x000CF81D, 0x000CF81C, 0x000CF81B, 0x000CF81A, 0x000CF819, 0x000CF818, 0x000CF817, 0x000CF816, 0x000CF815, 0x000CF814, 0x000CF813, 0x000CF812, 0x000CF811, 0x000CF810, 0x000CF80F, 0x000CF80E, 0x000CF80D, 0x000CF80C, 0x000CF80B, 0x000CF807, 0x000CF806, 0x000CF805, 0x000CF804, 0x000CF803, 0x000CF802, 0x000CF801, 0x000CF800, 0x000CF7FF, 0x000CF7FE, 0x000CF7FD, 0x000CF7FC, 0x000CF7FB, 0x000CF7FA, 0x000CF7F9, 0x000CF7F8, 0x000CF7F7, 0x000CF7F6, 0x000CF7F2, 0x000CF7F1, 0x000CF7F0, 0x000CF7EF, 0x000CF7EE, 0x000CF7ED, 0x000CF7DA, 0x000CF7D9, 0x000CF7D8, 0x000CF7C7, 0x000CF7C6, 0x000CF7C5, 0x000CF7C4, 0x000CF7C3, 0x000CF7C2, 0x000CF7BB, 0x000CF7BA, 0x000CF7B9, 0x000CF7B8, 0x000CF7B7, 0x000CF7B6, 0x000CF7B5, 0x000CF7B4, 0x000CF7B3, 0x000CF7B2, 0x000CF7B1, 0x000CF7B0, 0x000CF7AF, 0x000CEE84, 0x000CEE82, 0x000CEE80, 0x000CEE7E, 0x000CEE7C, 0x000CEE78, 0x000CEE76, 0x000CEE74, 0x000CEE72, 0x000CEE70, 0x000CEE6E, 0x000CE20B, 0x000CE1B2, 0x000CE1B1, 0x000CE1B0, 0x000CE1AF, 0x000CE1AE, 0x000CE1AD, 0x000CC848, 0x000CC846, 0x000CC844, 0x000CC842, 0x000CAE15, 0x000C891D, 0x000C891B, 0x000C8919, 0x000C8917, 0x000C8915, 0x000C8913, 0x000C8911, 0x000C7CBD, 0x000C7CBB, 0x000C5D12, 0x000C5D11, 0x000C5D10, 0x000C5A9D, 0x000C5809, 0x000C36EA, 0x000C36E8, 0x000C33BD, 0x000C236D, 0x000C0166, 0x000C0165, 0x000C0164, 0x000BACF3, 0x000BACD7, 0x000A4DCD, 0x000A199B, 0x0008F19A, 0x0003CA00, 0x0003C9FE, 0x00018801, 0x00018388, 0x00056B17, 0x00056A9E, 0x00056A9D, 0x00092ACA, 0x00092A8E, 0x00092A8D, 0x00092A89, 0x00092A86, 0x00092A75, 0x0008B6D0, 0x0008B6CF, 0x0008B6CE, 0x0008B6CD, 0x0008B6CC, 0x0008B6C8, 0x0008B6C7, 0x0008B6C6, 0x0008B6C5, 0x0008B6C4, 0x0008B6C3, 0x0008B6C2, 0x0008B6C1, 0x0008B6C0, 0x0008B6BF, 0x0008B6BE, 0x0008B6BD, 0x0008B6BC, 0x0008B6BB, 0x0008B6BA, 0x0008B6B9, 0x0008B6B8, 0x0008B6B7, 0x0008B6B6, 0x0008B6B5, 0x0008B6B4, 0x0008B6B3, 0x0008B6B2, 0x0008B6B1, 0x0008B6AD, 0x0008B6AC, 0x0008B6AB, 0x0008B6AA, 0x0008B6A9, 0x0008B6A8, 0x0008B6A7, 0x0008B6A6, 0x0008B6A5, 0x0008B6A4, 0x0008B6A3, 0x0008B6A2, 0x0008B6A1, 0x0008B6A0, 0x0008B69F, 0x0008B69B, 0x0008B69A, 0x0008B699, 0x0008B695, 0x0008B694, 0x0008B693, 0x0008B692, 0x0008B691, 0x0008B68D, 0x0008B68C, 0x0008B68B, 0x0008B68A, 0x0008B689, 0x0008B688, 0x0008B687, 0x0008B686, 0x0008B685, 0x0008B684, 0x0008B683, 0x0008B682, 0x0008B681, 0x0008B680, 0x0008B67F, 0x0008B67A, 0x0008B678, 0x0008B677, 0x0008B676, 0x0008B675, 0x0008B674, 0x0008B673, 0x0008B672, 0x0008B671, 0x0008B670, 0x0008B66F, 0x0008B66E, 0x0008B66D, 0x0008B66C, 0x0008B66B, 0x0008B66A, 0x0008B669, 0x0008B668, 0x0008B667, 0x0008B666, 0x0008B665, 0x0008B664, 0x0008B663, 0x0008B662, 0x0008B65A, 0x00084B88, 0x00084B87, 0x00084B86, 0x00084B85, 0x00084B84, 0x00084B83, 0x00084B82, 0x00084B81, 0x00084B80, 0x00084B7A, 0x00084B79, 0x00084B78, 0x00084B71, 0x00084B70, 0x00084B6F, 0x00084B6A, 0x00084B69, 0x00084B68, 0x0006B219, 0x0006B218, 0x0006B217, 0x0004F006, 0x0004F000, 0x00041037, 0x00041036, 0x00041035, 0x00041034, 0x00041033, 0x0004102C, 0x00041027, 0x00041022, 0x00041021, 0x00041020, 0x0004101E, 0x0003DF85, 0x0003DF81, 0x0003DF80, 0x0003DF7F, 0x0003DF7E, 0x0003DF7D, 0x0003DF7C, 0x0003DF7B, 0x0003DF7A, 0x0003DF79, 0x0003DF78, 0x0003DF77, 0x0003DF76, 0x0003DF75, 0x0003DF74, 0x0003DF73, 0x0003DF6B, 0x0003DF67, 0x0003DF66, 0x0003DF62, 0x0003DF4C, 0x0003DF2B, 0x0001BCA7, 0x0001BC82, 0x0001B9E2, 0x0001B9C8, 0x0001B9C7, 0x0001B9C5, 0x0001B9C4, 0x0001B9C3, 0x0001B9C1, 0x0001B9C0, 0x0001B9BE, 0x0001B9BC, 0x0001B9BB, 0x0001B9B8, 0x0001B9B7, 0x0001B9B0, 0x0001B78A, 0x0001B772, 0x0001B771, 0x0001B770, 0x0001B76F, 0x0001B76E, 0x0001B76D, 0x0001B76C, 0x0001B76B, 0x0001B76A, 0x0001B768, 0x0001B767, 0x0001B766, 0x0001B762, 0x0001B761, 0x0001B757, 0x0001B756, 0x0001B755, 0x0001B555, 0x0001B54E, 0x0001B446, 0x0001B440, 0x0001B40F, 0x0001B40E, 0x0001B40D, 0x0001B40C, 0x0001B408, 0x0001B407, 0x0001B406, 0x0001B405, 0x0001B404, 0x0001B403, 0x0001B402, 0x0001B401, 0x0001B400, 0x0001B3FF, 0x0001B3FE, 0x0001B3FD, 0x0001B3FC, 0x0001B3FB, 0x0001B3DB, 0x0001B3DA, 0x0001B3D9, 0x0001B3D8, 0x0001B3D4, 0x0001B3D3, 0x0001B3D2, 0x0001B3D1, 0x0001B3D0, 0x0001B3CF, 0x0001B3CE, 0x0001B3CD, 0x0001B3CC, 0x0001B3CB, 0x0001B33D, 0x0001B335, 0x0001B31F, 0x000BE056, 0x000BE055, 0x000BE054, 0x000BE053, 0x000BE051, 0x000BE050, 0x000BE04F, 0x000BE04E, 0x000BE04D, 0x000BE04B, 0x000BE04A, 0x000BE049, 0x000BE048, 0x000BE03E, 0x000BE03D, 0x000BE03C, 0x000BE03B, 0x000BE03A, 0x000BE031, 0x000BDFF8, 0x000BDFF7, 0x000BDFF6, 0x000BDFF5, 0x000BDFF4, 0x000BDFF3, 0x000BDFF2, 0x000BDFF1, 0x000BDFF0, 0x000BDFED, 0x000BDFEC, 0x000BDFEB, 0x000BDFEA, 0x000BDFE9, 0x000BDFE8, 0x000BDFE7, 0x000BDFE6, 0x000BDFE5, 0x000BDFE4, 0x000BDFE1, 0x000BDFE0, 0x000BDFDF, 0x000BDFDE, 0x000BDFDD, 0x000BDFDC, 0x000BDFDB, 0x000BDFDA, 0x000BDFC7, 0x000BDFC6, 0x000BDFC5, 0x000BDFC4, 0x000BDFC3, 0x000BDFC2, 0x000BDFC1, 0x000BDFC0, 0x000BDFBF, 0x000BDFBE, 0x000BDFBD, 0x000BDFBC, 0x000BDFBB, 0x000BDFBA, 0x000BDFB9, 0x000B9754, 0x000B9753, 0x000B9752, 0x000B9751, 0x000B9750, 0x000B974F, 0x000B974B, 0x000B974A, 0x000B9749, 0x000B9748, 0x000B9747, 0x000B9746, 0x000B9745, 0x000B9744, 0x000B9743, 0x000B9742, 0x000B9741, 0x000B9740, 0x000B9739, 0x000B9738, 0x000B9737, 0x000B9736, 0x000B9735, 0x000B9734, 0x000B9730, 0x000B972F, 0x000B972E, 0x000B9721, 0x000B9720, 0x000B971F, 0x000B971E, 0x000B971D, 0x000B971C, 0x000B971B, 0x000B971A, 0x000B9719, 0x000B9718, 0x000B9717, 0x000B9716, 0x000B9715, 0x000B9714, 0x000B9713, 0x000B9712, 0x000B9711, 0x000B9710, 0x000B970F, 0x000B970E, 0x000B970D, 0x000B8837, 0x000B50F9, 0x000B50F6, 0x000B50F5, 0x000B50F4, 0x000B50F3, 0x000B50F2, 0x000B50F1, 0x000B50F0, 0x000B50EF, 0x000B50EE, 0x000B50ED, 0x000B50EC, 0x000B50EB, 0x000B50EA, 0x000B50E9, 0x000B50E8, 0x000B50E7, 0x000B50E6, 0x000B50E5, 0x000B50E4, 0x000B50E3, 0x000B50E0, 0x000B50DF, 0x000B50DE, 0x000B50DD, 0x000B50DC, 0x000B50DB, 0x000B50DA, 0x000B50D9, 0x000B50D8, 0x000B50D7, 0x000B50D5, 0x000B50D4, 0x000B50D3, 0x000B50D2, 0x000B50D1, 0x000B50CE, 0x000B50CD, 0x000B50CC, 0x000B50CB, 0x000B50C2, 0x000B50C1, 0x000B50BF, 0x000B50BE, 0x000B50AA, 0x000B50A9, 0x000B50A8, 0x000B50A7, 0x000B50A6, 0x000B50A5, 0x000B50A4, 0x000B50A3, 0x000B50A2, 0x000B50A1, 0x000B50A0, 0x000B509F, 0x000B509E, 0x000B509D, 0x000B509C, 0x000B509B, 0x000B509A, 0x000B507F, 0x000B507E, 0x000B507D, 0x000B507C, 0x000B507B, 0x000B507A, 0x000B5079, 0x000B5078, 0x000B5077, 0x000B506D, 0x000B506C, 0x000B506B, 0x000B506A, 0x000B5069, 0x000B5068, 0x000B5067, 0x000B5066, 0x000B5065, 0x000B5064, 0x000B5063, 0x000B5062, 0x000B5061, 0x000B5060, 0x000B505F, 0x000B505E, 0x000B505D, 0x000B505C, 0x000B5058, 0x000B5057, 0x000B5056, 0x000B5055, 0x000B5054, 0x000B5053, 0x000B5052, 0x000B5051, 0x000B5050, 0x000B504F, 0x000B504E, 0x000B504D, 0x000B4239, 0x000B4238, 0x000B4237, 0x000B4236, 0x000B4235, 0x000B4234, 0x000B4233, 0x000B4232, 0x000B4231, 0x000B4230, 0x000B422F, 0x000B422E, 0x000B422D, 0x000B422C, 0x000B422B, 0x000B422A, 0x000B4229, 0x000B4228, 0x000B4227, 0x000B4226, 0x000B4225, 0x000AD5A0, 0x000AD59E, 0x000AD59D, 0x000AD59C, 0x000AD59B, 0x000AD59A, 0x000AD599, 0x000AD598, 0x000AD597, 0x000AD596, 0x000AD595, 0x000AD594, 0x000AD593, 0x000AD592, 0x000AD591, 0x000AD590, 0x000AD58F, 0x000AD58C, 0x000AD58B, 0x000AD58A, 0x000AD589, 0x000AD588, 0x000AD587, 0x000AD586, 0x000AD585, 0x000AD584, 0x000AD583, 0x000AD57E, 0x000AD57D, 0x000AD57C, 0x000AD57B, 0x000AD566, 0x000AD565, 0x000AD564, 0x000AD563, 0x000AD562, 0x000AD561, 0x000AD560, 0x000AD55F, 0x000AD55E, 0x000AD55D, 0x000AD55C, 0x000AD55B, 0x000AD55A, 0x000AD559, 0x000AD558, 0x000AD557, 0x000AD556, 0x000AD555, 0x000AD554, 0x000AD553, 0x000AD522, 0x000AD521, 0x000AD520, 0x000AD51F, 0x000AD516, 0x000AD515, 0x000AD514, 0x000AD513, 0x000AD512, 0x000AD511, 0x000AD510, 0x000AD50F, 0x000AD50E, 0x000AD50D, 0x000AD50C, 0x000AD50B, 0x000AD506, 0x000AD505, 0x000AD504, 0x000AD503, 0x000AD4FC, 0x000AD4FB, 0x000AD4FA, 0x000AD4F9, 0x000AD4F6, 0x000AD4F5, 0x000AD4F0, 0x000AD4EC, 0x000AD4EB, 0x000AD4EA, 0x000AD4E9, 0x000AD4E8, 0x000AD4E7, 0x000AD4E6, 0x000AD4E5, 0x000AD4E4, 0x000AD4E3, 0x000AD4E2, 0x000AD4E1, 0x000AD4E0, 0x000AD4DF, 0x000AD4D6, 0x000AD4D5, 0x000AD4D4, 0x000AD4D3, 0x000AD4D2, 0x000AD4D1, 0x000AD4D0, 0x000AD4CF, 0x000AD4CE, 0x000AD4CD, 0x000AD4CC, 0x000AD4CB, 0x000AD4CA, 0x000AD4C9, 0x000AD4C8, 0x000AD4C7, 0x000AD4C6, 0x000AD4C5, 0x000AD4C4, 0x000AD4C3, 0x000AD4C0, 0x000AD4BF, 0x000AD4BE, 0x000AD4BD, 0x000AD4BC, 0x000AD4BB, 0x000AD4BA, 0x000AD4B9, 0x000AD4B8, 0x000AD4B7, 0x000AD4B4, 0x000AD4B3, 0x000AD4B2, 0x000AD4B1, 0x000AD4B0, 0x000AD4AF, 0x000AD4AE, 0x000AD4AD, 0x000AD495, 0x000AD494, 0x000AD492, 0x000AD491, 0x000AD490, 0x000AD48F, 0x000AD48E, 0x000AD48D, 0x000AD48C, 0x000AD48B, 0x000AD48A, 0x000AD489, 0x000AD452, 0x000AD451, 0x000AD44B, 0x000AD44A, 0x000AD449, 0x000AD448, 0x000ACCD2, 0x000ACCD1, 0x000ACCCE, 0x000ACCCD, 0x000ACCC9, 0x000ACCC8, 0x000ACCC6, 0x000ACCC1, 0x000ACCC0, 0x000ACCBF, 0x000ACCBE, 0x000ACCBD, 0x000ACCBC, 0x000ACCBB, 0x000ACCBA, 0x000ACCB9, 0x000ACCB8, 0x000ACCB7, 0x000ACC9E, 0x000ACC9D, 0x000ACC94, 0x000ACC93, 0x000A6D7F, 0x000A6D7D, 0x000A6D7B, 0x000A6D79, 0x0009E023, 0x0009DFF7, 0x00096D9B, 0x0009610D, 0x00094E3E, 0x00092DBE, 0x0009171B, 0x0008FB79, 0x000896A3, 0x000878BB, 0x00087835, 0x00087834, 0x00087833, 0x00087832, 0x000877F1, 0x000877DC, 0x000877D5, 0x000877CB, 0x000877CA, 0x000877C9, 0x000877B1, 0x000877AB, 0x000877A7, 0x00065BBF, 0x00065BB3, 0x00065BAC, 0x00065B9D, 0x00065B9B, 0x00065B99, 0x00065B94, 0x00060DA7, 0x0008895A, 0x00088958, 0x00088956, 0x00088954, 0x00088952, 0x00086993, 0x00086991, 0x00086990, 0x0008698E, 0x0008698C, 0x00086985, 0x00086983, 0x00086981, 0x0008697E, 0x00080699, 0x00080697, 0x0007E010, 0x0007D678, 0x0007C932, 0x0007C92E, 0x0007BC1A, 0x0007BC19, 0x0007BC15, 0x0007A15C, 0x0007A15B, 0x0007A15A, 0x0007A159, 0x0007A158, 0x0007A157, 0x0007A155, 0x0007A154, 0x0007A152, 0x0007A151, 0x0007A150, 0x0007A14F, 0x0007A14E, 0x0007A14C, 0x0007A14B, 0x0007A14A, 0x0007A149, 0x0007A13C, 0x0007A13B, 0x0007A139, 0x0007A138, 0x0007A137, 0x0007A136, 0x0007A135, 0x0007A134, 0x0007A132, 0x0007A131, 0x0007A12E, 0x0007A12D, 0x0007A12C, 0x0007A129, 0x0007A128, 0x0007A125, 0x0007A123, 0x0007A120, 0x0007A11E, 0x0007A11C, 0x0007A0F1, 0x0007A0F0, 0x0007A0EF, 0x0007A0EE, 0x00076F12, 0x0004A1B4, 0x0004A1B1, 0x00049B92, 0x0004950E, 0x0002584C, 0x0006D92C, 0x0006BBB5, 0x0006B46C, 0x0006B46B, 0x00068B83, 0x000663DA, 0x00060797, 0x000487D8, 0x000487D1, 0x000483C2, 0x000483C1, 0x0004408F, 0x0005DB88, 0x0005DB87, 0x0005DB86, 0x0005DB85, 0x0005DB7E, 0x0005DB7B, 0x0005CBFE, 0x0005C06C, 0x0005B6A1, 0x0005B6A0, 0x0005B69F, 0x0005B69E, 0x00052794, 0x00024CFF, 0x0004F912, 0x0004B28F, 0x0004B28D, 0x0004B28B, 0x0004B288, 0x00042BE9, 0x00036585, 0x00036584, 0x00036583, 0x00025D69, 0x00045F96, 0x0004223D, 0x0004223C, 0x0004223B, 0x00017696, 0x00017695, 0x00013106, 0x00013105, 0x00013104, 0x0003B97C, 0x00036A46, 0x00036A45, 0x00036A44, 0x0003619E, 0x0003521F, 0x0003452F, 0x0003452E, 0x000330BC, 0x000330B3, 0x000295F3, 0x0001FD7C, 0x0001FD7B, 0x0001FD77, 0x0002C37B, 0x0002AC61, 0x0002AC60, 0x00026C3B, 0x000261C1, 0x000261C0, 0x000261BD, 0x000233D0, 0x000209AA, 0x000209A6, 0x000209A5, 0x0001CF2B, 0x0001BE1B, 0x0001BE1A, 0x0001B3A4, 0x0001B3A3, 0x0001B3A2, 0x0001B3A1, 0x0001B3A0, 0x0001B39F, 0x00013EDC, 0x00013EDB, 0x00013EDA, 0x00013ED9, 0x00013ED8, 0x00013ED7, 0x00013AB2, 0x0001396E, 0x0001396D, 0x0001396C, 0x0001396B, 0x0001396A, 0x00013969, 0x00013968, 0x00013967, 0x00013966, 0x00013965, 0x00013964, 0x00013963, 0x00013962, 0x00013961, 0x00013960, 0x0001395E, 0x0001395D, 0x0001395C, 0x0001395B, 0x00013959, 0x00013958, 0x00013957, 0x00013956, 0x00013955, 0x00013954, 0x00013953, 0x00013952, 0x00013951, 0x00013950, 0x0001394F, 0x0001394E, 0x0001394D, 0x0001394C, 0x0001394B, 0x00013948, 0x00013946, 0x00013941, 0x00013940, 0x0001393F, 0x0001393E, 0x0001393D, 0x0001393C, 0x0001393B, 0x0001393A, 0x00013939, 0x00013938, 0x0001392A, 0x00013922, 0x00013921, 0x00013920, 0x0001391E, 0x0001391D, 0x0001391C, 0x0001391A, 0x00013914, 0x00013913, 0x00013912, 0x00013911, 0x00013910, 0x000136D6, 0x000136D5, 0x000136D4, 0x000136CF, 0x000135BA, 0x00012EB6, 0x00012E4D, 0x00012E4B, 0x00012E49, 0x00012E46, 0x001076EC, 0x001076EB, 0x001076EA, 0x001076E9, 0x001076E8, 0x001076E7, 0x001019AE, 0x000E0CD6, 0x000E0CD5, 0x000218F2, 0x00021876, 0x000B64B3, 0x000A44C6, 0x000A44C5, 0x000A44C4, 0x000A44C3, 0x000A44C2, 0x000A44C1, 0x000A44BF, 0x000A44BE, 0x000A44BD, 0x000A44BC, 0x000A44BB, 0x000A44BA, 0x000A44B9, 0x000A44B7, 0x000A44B6, 0x000A44B5, 0x000A44B2, 0x000A44B1, 0x000A44B0, 0x000A44AF, 0x000A44AE, 0x000A44AD, 0x000A44AC, 0x000A44AB, 0x000A44AA, 0x000A44A9, 0x000A44A8, 0x000A44A7, 0x000A44A6, 0x000A44A5, 0x000A44A4, 0x000A44A3, 0x000A44A1, 0x000A44A0, 0x000A449F, 0x000A449E, 0x000A449D, 0x000A449C, 0x000A449B, 0x000967E3, 0x000965B0, 0x000965AF, 0x000965AE, 0x000965AD, 0x000965AB, 0x000965AA, 0x000965A9, 0x000965A8, 0x000965A7, 0x000965A5, 0x000965A4, 0x000965A3, 0x000965A2, 0x000965A1, 0x000965A0, 0x0009659F, 0x0009659E, 0x0009659C, 0x0009659B, 0x0009659A, 0x00096599, 0x00096598, 0x0000000A, 0x0000000F, 0x0010E44B, 0x0010CC6A, 0x0010C762, 0x001092B8, 0x00105A4E, 0x001058AA, 0x00105177, 0x00105109, 0x00104B40, 0x00104B3F, 0x00103370, 0x000FED17, 0x000FE6A9, 0x000FBC3D, 0x000FBC3C, 0x000FBC3B, 0x000FBC3A, 0x000F6767, 0x000F5D0A, 0x000F5D08, 0x000F5D07, 0x000F5D06, 0x000F5D05, 0x000F583A, 0x000F5839, 0x000F4983, 0x000F257D, 0x000D4BE7, 0x000D4B35, 0x000F2015, 0x000F2014, 0x000F2013, 0x000F2012, 0x000F1491, 0x000F08FB, 0x000F08FA, 0x000F08F9, 0x000F08F8, 0x000F08F7, 0x000F08F6, 0x000F08F5, 0x000F08F3, 0x000F08F1, 0x000F03F8, 0x000ED417, 0x000EAFDD, 0x000EAFDC, 0x000EAFDB, 0x000EAFD7, 0x000EA5C5, 0x000E77BB, 0x000E49F8, 0x000E49F7, 0x000E3148, 0x000E3147, 0x000E3146, 0x000DB351, 0x000DABAB, 0x000DABA9, 0x000DABA7, 0x000DAB04, 0x000D955A, 0x000D8E43, 0x000D0756, 0x000C7316, 0x000C04BB, 0x000BFB09, 0x000BBCD5, 0x000B08C7, 0x000AD06F, 0x000AADB7, 0x000AADB6, 0x0009BAF8, 0x000999E7, 0x0004C3C8, 0x0004C3C6, 0x0008632C, 0x0008632A, 0x0006F3AA, 0x00064298, 0x00064296, 0x00064294, 0x00064292, 0x00064290, 0x0006428E, 0x0006428B, 0x00064289, 0x00064287, 0x00064285, 0x00064283, 0x0005C09E, 0x0005B2DF, 0x00043E28, 0x00043E27, 0x00041F95, 0x00025D7C, 0x00025CFE, 0x00025C68, 0x00025C13, 0x00020949, 0x000200BA, 0x000200B6, 0x000E72B0, 0x000E72AE, 0x000E72AC, 0x000E72AA, 0x000E72A8, 0x000E72A6, 0x000E72A4, 0x000E72A2, 0x000E72A0, 0x000E729E, 0x000E729C, 0x000E729A, 0x000E7298, 0x000E7296, 0x000E4897, 0x000E42E1, 0x000E42E0, 0x000E42DF, 0x000E3CB7, 0x000E2618, 0x000E2617, 0x000E1FC3, 0x000E1FBD, 0x000E1FBC, 0x000E1FBB, 0x000DF202, 0x000DC530, 0x000DC52E, 0x000DB8A2, 0x000DB5D2, 0x000DA74D, 0x000DA735, 0x000DA734, 0x000DA733, 0x000DA732, 0x000D363B, 0x000D284D, 0x000CF89E, 0x000CE70B, 0x000CC84D, 0x000C8878, 0x000C8874, 0x000C8872, 0x000C8870, 0x000C886E, 0x000C886C, 0x000C886A, 0x000C8868, 0x000C8866, 0x000C8864, 0x000C8861, 0x000C4F2E, 0x000B9BE0, 0x000B9BDE, 0x000B9BDC, 0x000B9BDA, 0x000B9BD8, 0x000B9BD6, 0x000B9BD4, 0x000B9BD2, 0x000B9BD0, 0x000B9BCC, 0x000ABD30, 0x00019958, 0x00019954, 0x00019952, 0x0001994F, 0x00044E8B, 0x00044E70, 0x00044E6E, 0x00044E6C, 0x00044E6A, 0x00044E67, 0x00044E65, 0x00044E63, 0x0003A3E4, 0x0003A3DD, 0x0003A3D2, 0x00098627, 0x00098626, 0x00098625, 0x00098624, 0x00098623, 0x00098621, 0x00098620, 0x00075868, 0x000747FE, 0x000747FB, 0x0005E8AD, 0x0005E52A, 0x0005CAE1, 0x0005CAE0, 0x0005CADF, 0x0004286C, 0x0003532C, 0x00027F15, 0x00027F12, 0x00027F09, 0x00027F08, 0x00027F07, 0x00027F06, 0x00027F03, 0x000B634C, 0x000AF5FD, 0x000AEBF7, 0x000AEBF4, 0x000AEBF3, 0x000AEBF1, 0x000AB7BB, 0x000AB375, 0x000AA03E, 0x000A34F8, 0x0009F7A6, 0x0009E01F, 0x0009DFF5, 0x0009DFBB, 0x0009DA9E, 0x0009DA9D, 0x0009DA9C, 0x0008F997, 0x0008D770, 0x0008CDFA, 0x0006A10A, 0x0006A109, 0x0006A108, 0x0006A107, 0x0006A106, 0x000800E4, 0x0007C260, 0x0005ADA1, 0x0005ADA0, 0x0005AD9F, 0x0005AD9E, 0x0005AD9D, 0x0005AD99, 0x0005AD93, 0x0005ACE5, 0x0005ACE4, 0x0005ACE3, 0x0005ACE2, 0x0005ACE1, 0x0005ACE0, 0x0005ACDF, 0x0005ACDE, 0x0005ACDD, 0x0005ACDC, 0x0005ACDB, 0x0005333B, 0x00071CF3, 0x00070BC4, 0x00070BC3, 0x0006F993, 0x0006F266, 0x0006E806, 0x0006C9EF, 0x0006A712, 0x0006A711, 0x00068523, 0x00068522, 0x00068521, 0x00068520, 0x0006851F, 0x0006851E, 0x00067185, 0x00067184, 0x00067183, 0x00067182, 0x00067181, 0x00067180, 0x0006717F, 0x000663D7, 0x00063B47, 0x00063B46, 0x00063B45, 0x00063B44, 0x00063B43, 0x00063B42, 0x00062F5A, 0x00059654, 0x0004B56C, 0x00060CC2, 0x0005AF48, 0x00056189, 0x0005598C, 0x0005421B, 0x00050E77, 0x0004FDB0, 0x0004E4E6, 0x0004BCE0, 0x000457AB, 0x00044E12, 0x0004055F, 0x0003EC95, 0x0003E6BC, 0x0003E6BB, 0x0003E4AD, 0x000319E5, 0x000319E4, 0x000319E3, 0x0003199A, 0x00031941, 0x000318FB, 0x000318FA, 0x000318EC, 0x0003807B, 0x00035074, 0x00035073, 0x0002996F, 0x0003ADA4, 0x0003ADA3, 0x0003AD93, 0x0003AD90, 0x0003AD8F, 0x0003AD8E, 0x0003AD75, 0x0003AD74, 0x0003AD6E, 0x0003AD6D, 0x0003AD6C, 0x0003AD68, 0x0003AD57, 0x0003AD54, 0x0003AD53, 0x0003AD52, 0x0003A070, 0x00039647, 0x00037CE9, 0x00034CD6, 0x00034CD4, 0x00034CD2, 0x00034CD0, 0x00034CCE, 0x00033764, 0x00033761, 0x00033760, 0x0003292F, 0x00023DF8, 0x0001FE9B, 0x0001CB34, 0x0001A31C, 0x0002C260, 0x0002C25E, 0x0002C25C, 0x0002C25A, 0x0002C259, 0x0002BAAB, 0x0002AC62, 0x00028AD9, 0x00028AD7, 0x00026C31, 0x000240D6, 0x000240D5, 0x000240D4, 0x000240D3, 0x00021EA3, 0x0001F6D4, 0x0001CB81, 0x0001C494, 0x0001BE15, 0x00012FEC, 0x00012FEB, 0x00012FEA, 0x00012FE9, 0x00012FE8, 0x00012FE7, 0x00012FE6, 0x00012FDF, 0x0000000F, 0x0000000A, 0x00017288, 0x00017009, 0x0010FD5E, 0x0010FCF7, 0x0010FCF4, 0x0010FCF2, 0x0010F9C6, 0x0010EC8A, 0x0010E2DD, 0x0010C6FB, 0x0010AA19, 0x0010A25C, 0x0010A25B, 0x0010A25A, 0x0010A259, 0x0010A258, 0x0010A257, 0x00106252, 0x001019D4, 0x0010076D, 0x000FA2C1, 0x000F9648, 0x000F8318, 0x000F8317, 0x000F8316, 0x000F8315, 0x000F8314, 0x000F8313, 0x000F82FC, 0x000F82FA, 0x000F71DD, 0x000F71D0, 0x000F71CF, 0x000F71CE, 0x000F71CD, 0x000F652C, 0x000F652B, 0x000F652A, 0x000F6529, 0x000F6527, 0x000F6526, 0x000F6525, 0x000F6524, 0x000F5D2D, 0x000F5D2C, 0x000F5D2B, 0x000F5D2A, 0x000F5D22, 0x000F5D21, 0x000F5D20, 0x000F5D1F, 0x000F5D1D, 0x000F5D1C, 0x000F5D1B, 0x000F5D1A, 0x000F494C, 0x000F1AC1, 0x000ECD54, 0x000ECD53, 0x000EA29C, 0x000DEED8, 0x000DEED7, 0x000D2AFE, 0x000D0758, 0x000C19FF, 0x000C1989, 0x000C0186, 0x000BA30E, 0x000AB85D, 0x000A3115, 0x000940D8, 0x0006EA8B, 0x00068C7B, 0x00068C79, 0x00068C63, 0x00068C57, 0x00017059, 0x00083167, 0x00079B1D, 0x0006AF63, 0x0006A8FD, 0x000647AC, 0x000557F5, 0x00046E0B, 0x00043E1E, 0x000E7A31, 0x000E5F43, 0x000E57F0, 0x000E3C16, 0x000DDD6F, 0x000DDD6E, 0x000DDD6D, 0x000DDD6C, 0x000DDD6B, 0x000DDD6A, 0x000DDD69, 0x000DDD68, 0x000DDD67, 0x000DDD66, 0x000DDD65, 0x000DDD64, 0x000D37CE, 0x000CEE9B, 0x000CDEC9, 0x000CC829, 0x000CC826, 0x000CC392, 0x000CB3ED, 0x000CB3EC, 0x000CB3EB, 0x000CADE9, 0x000C3DFB, 0x000C3DFA, 0x000C3DF9, 0x000C3DF8, 0x000C3DF7, 0x000C3DF6, 0x000C3DF5, 0x000C3DF4, 0x000C3DF3, 0x000C3DF2, 0x000C3DF1, 0x000C3DF0, 0x000C3DEF, 0x000C3DEE, 0x000C3DED, 0x000C3DEC, 0x000C3DEB, 0x000C3DEA, 0x000C3DE9, 0x000C3DE8, 0x000C3DE7, 0x000C3DE6, 0x000C3DE5, 0x000C3DE4, 0x000C334F, 0x000A4DCE, 0x0008FFDF, 0x0008FFDE, 0x0008ADFC, 0x0008ADFB, 0x0007A4FB, 0x00029B9B, 0x00029B9A, 0x00029B99, 0x00029B97, 0x00029B95, 0x00029B94, 0x00029B93, 0x00029B92, 0x00029B91, 0x00029B8F, 0x00029B8E, 0x00029B8C, 0x00029B8B, 0x00029B89, 0x00029B88, 0x00029B87, 0x00029B86, 0x00029B85, 0x00029B84, 0x00029B83, 0x00029B82, 0x00029B7E, 0x00029B7D, 0x00029B7C, 0x00029B7B, 0x00029B7A, 0x00029B79, 0x00029B78, 0x00029B76, 0x00029B75, 0x00029B74, 0x00029B73, 0x000295BF, 0x000295BE, 0x000295BD, 0x000295BC, 0x000295BB, 0x000295BA, 0x000295B9, 0x000295B8, 0x000295B7, 0x000295B6, 0x000295B5, 0x000295B4, 0x000295B3, 0x000295B2, 0x000295B1, 0x000295B0, 0x000295AF, 0x000295AE, 0x000295AD, 0x000295AC, 0x000295AB, 0x000295AA, 0x000295A9, 0x000295A8, 0x000295A7, 0x000295A6, 0x000295A5, 0x000295A4, 0x000295A3, 0x000295A2, 0x000295A1, 0x000295A0, 0x0002959E, 0x0002959D, 0x0002959C, 0x0002959B, 0x0002959A, 0x00029599, 0x00029598, 0x00029597, 0x00029596, 0x00029595, 0x00029594, 0x00029591, 0x0002958F, 0x0002958E, 0x0002958D, 0x0002958C, 0x0002958A, 0x00029589, 0x00029588, 0x00029587, 0x00029586, 0x00029585, 0x00029584, 0x00029583, 0x00029582, 0x00029581, 0x00029580, 0x0002957F, 0x0002957E, 0x0002957D, 0x0002957C, 0x0002957B, 0x0002957A, 0x00029579, 0x00029578, 0x00029577, 0x00029576, 0x00029575, 0x00029574, 0x00029573, 0x00029572, 0x00029571, 0x00029567, 0x00029563, 0x00029562, 0x00029561, 0x00029560, 0x0002955F, 0x0002955B, 0x0002954B, 0x00029543, 0x00029527, 0x0002950E, 0x00029043, 0x00028FED, 0x00028FEC, 0x00028FE1, 0x00028FDE, 0x00028FDD, 0x00028F8D, 0x00028F8C, 0x00028F46, 0x00028EFB, 0x00028EF9, 0x00028EE9, 0x00028EDC, 0x00028EDB, 0x00028E96, 0x00028E89, 0x00028E87, 0x00028E86, 0x00028E85, 0x00028E84, 0x00028E83, 0x00028E82, 0x00028E81, 0x00028E80, 0x00028E7F, 0x00028E7E, 0x00028E7D, 0x00028E7C, 0x00028E7B, 0x00028E7A, 0x00028E79, 0x00028E78, 0x00028E76, 0x00028E75, 0x00028E6A, 0x00028E5D, 0x00028E33, 0x00028E32, 0x00028E28, 0x00028E00, 0x00028DFF, 0x00028DF7, 0x00028DF6, 0x00028DF5, 0x00028DF4, 0x00028DF2, 0x00028DF1, 0x00028DF0, 0x00028DEF, 0x00028DEE, 0x00028DED, 0x00028DEC, 0x00028DEB, 0x00028DEA, 0x00028DE9, 0x00028DE8, 0x00028DE7, 0x00028DE6, 0x00028DE5, 0x00028DE4, 0x00028DE3, 0x00028DE2, 0x00028DE1, 0x00028DE0, 0x00028DDF, 0x00028DDE, 0x00028DDC, 0x00028DDB, 0x00028DD9, 0x00028DD4, 0x00028DC9, 0x00028DC6, 0x00028D92, 0x00028D8D, 0x00028D88, 0x00028D84, 0x00028D83, 0x00028D82, 0x00028D81, 0x00028D80, 0x00028D7C, 0x00028D7B, 0x00028D7A, 0x00028D78, 0x00028D77, 0x00028D76, 0x00028D75, 0x00028D74, 0x00028D73, 0x00028D72, 0x00028D71, 0x00028D70, 0x00028D6F, 0x00028D6E, 0x00028D6D, 0x00028D6C, 0x00028D6B, 0x00028D6A, 0x00028D69, 0x00028D68, 0x00028D67, 0x00028D66, 0x00028D65, 0x00028D64, 0x00028D63, 0x00028D62, 0x00028D61, 0x00028D60, 0x00028D5F, 0x00028D5E, 0x0001E0E7, 0x0001E0E6, 0x0001E0DA, 0x0001E0D9, 0x0001E0D8, 0x0001E0D7, 0x0001E0D6, 0x0001E09F, 0x0001E089, 0x0001E088, 0x0001E087, 0x0001E086, 0x0001E085, 0x0001E084, 0x0001E083, 0x0001E082, 0x0001E081, 0x0001E071, 0x0001E05D, 0x0001E05C, 0x0001E05B, 0x0001E033, 0x0001E024, 0x0001E023, 0x0001E022, 0x0001E018, 0x0001E009, 0x0001E008, 0x0001E007, 0x0001E006, 0x0001E005, 0x0001E004, 0x0001E003, 0x0001E002, 0x0001E001, 0x0001E000, 0x0001DFFF, 0x0001DFFE, 0x0001DFFD, 0x0001DFFC, 0x0001DFFB, 0x0001DFFA, 0x0001DFF9, 0x0001DFF8, 0x0001DFF7, 0x0001DFF5, 0x0001DFF4, 0x0001DFF3, 0x0001DFF2, 0x0001DFF1, 0x0001DFF0, 0x0001DFEF, 0x0001DFEE, 0x0001DFED, 0x0001DFEC, 0x0001DFEB, 0x0001DFEA, 0x0001DFE9, 0x0001DFE8, 0x0001DFE7, 0x0001DFE6, 0x0001DFE5, 0x0001DFE4, 0x0001DFE3, 0x0001DFE2, 0x0001DFE1, 0x0001DFE0, 0x0001DFDF, 0x0001DFDE, 0x0001DFD4, 0x0001DFD3, 0x0001DFD2, 0x0001DFD1, 0x0001DFD0, 0x0001DFCF, 0x0001DFCE, 0x0001DFCD, 0x0001DFCC, 0x0001DFCB, 0x0001DFCA, 0x0001DFC9, 0x0001DFC8, 0x0001DFC7, 0x0001DFC6, 0x0001DFB9, 0x0001DFA9, 0x0001DF09, 0x0001DED0, 0x0001DE68, 0x0001DE10, 0x0001DDFB, 0x0001DDC8, 0x0001DDA2, 0x0001DDA1, 0x0001DDA0, 0x0001DD9F, 0x0001DD9C, 0x0001DD97, 0x0001DD96, 0x0001DD95, 0x0001DD54, 0x0001DD4E, 0x0001DD4A, 0x0001DD47, 0x0001DD42, 0x0001DD41, 0x0001DD39, 0x0001DD38, 0x0001DD1B, 0x0001DD17, 0x0001DD0E, 0x0001DD0D, 0x0001DD0B, 0x0001DD07, 0x0001DD06, 0x0001DD05, 0x0001DD04, 0x0001DD03, 0x0001DD02, 0x0001DD01, 0x0001DCFE, 0x0001DCFA, 0x0001DCF5, 0x0001DCEE, 0x0001DCEC, 0x0001DCEB, 0x0001DCEA, 0x0001DCE9, 0x0001DCE8, 0x0001DCE6, 0x0001DCE4, 0x0001DCE3, 0x0001DCE2, 0x0001DCE1, 0x0001DCE0, 0x0001DCDE, 0x0001DCDD, 0x0001DCCF, 0x0001DCCE, 0x0001DC1F, 0x0001DC1E, 0x0001DC14, 0x0001DBFD, 0x0001DBF8, 0x0001DBD7, 0x0001DBD6, 0x0001DBCF, 0x0001DB71, 0x0001DB5C, 0x0001DB5B, 0x0001DB58, 0x0001DB54, 0x0001DB51, 0x0001DB3F, 0x0001DAC1, 0x0001DA3B, 0x0001DA32, 0x0001DA26, 0x0001DA08, 0x0001DA02, 0x0001D9FF, 0x0001D9FE, 0x0001D9FD, 0x0001D9FC, 0x0001D9FB, 0x0001D9FA, 0x0001D9F5, 0x0001D9F2, 0x0001D9EE, 0x0001D9E2, 0x0001D9C7, 0x0001D9C2, 0x0001D9C1, 0x0001D9C0, 0x0001D9BF, 0x0001D9BE, 0x0001D9BD, 0x0001D9BC, 0x0001D9BB, 0x0001D9BA, 0x0001D8C9, 0x0001D8C8, 0x0001D8C7, 0x0001D8C0, 0x0001D8B5, 0x0001D8AE, 0x0001D8AA, 0x0001D8A5, 0x0001D87F, 0x0001D87E, 0x0001D87C, 0x0001D87B, 0x0001D877, 0x0001D86B, 0x0001D867, 0x0001D865, 0x0001D862, 0x0001D860, 0x0001D85F, 0x0001D85E, 0x0001D7F2, 0x0001D7EB, 0x0001D7EA, 0x0001D745, 0x0001D728, 0x0001D6CA, 0x0001D62F, 0x0001D62E, 0x0001D62C, 0x0001D5EB, 0x0001D5E9, 0x0001D5E7, 0x0001D5E6, 0x0001D5E4, 0x0001D5E2, 0x0001D5DE, 0x0001D59A, 0x0001D568, 0x0001D55D, 0x0001D552, 0x0001D551, 0x0001D535, 0x0001D520, 0x0001D4FD, 0x0001D4ED, 0x0001D4D4, 0x0001D4B6, 0x0001D4B4, 0x0001D4B3, 0x0001D49F, 0x0001D3ED, 0x0001D098, 0x0001D097, 0x0001D083, 0x0001D082, 0x0001D062, 0x0001CFDF, 0x0001CFDE, 0x0001CFD8, 0x0001CFD4, 0x0001CFD2, 0x0001CFD1, 0x0001CFCD, 0x0001CFCA, 0x0001CFC8, 0x0001CFC0, 0x0001CFBB, 0x0001CFBA, 0x0001CFB9, 0x0001CFB4, 0x0001CFB3, 0x0001CFB2, 0x0001CFB0, 0x0001CF78, 0x0001CF77, 0x0001CF5C, 0x0001CF31, 0x0001CF2E, 0x0001CF00, 0x0001CEEA, 0x0001CEE6, 0x0001CEE4, 0x0001CEE3, 0x0001CEE2, 0x0001CECE, 0x0001CECD, 0x0001CECB, 0x0001CEC7, 0x0001CEC3, 0x0001CEC2, 0x0001CEC1, 0x0001CEC0, 0x0001CE9C, 0x0001CE9B, 0x0001CE99, 0x0001CE82, 0x0001CE81, 0x0001CE65, 0x0001CE58, 0x0001CE57, 0x0001CDF9, 0x0001CDD7, 0x0001CDCD, 0x0001CDCC, 0x0001CDCB, 0x0001CDCA, 0x0001CDC8, 0x0001CDC2, 0x0001CD9E, 0x0001CD8C, 0x0001CD8A, 0x0001CD84, 0x0001CD82, 0x0001CD61, 0x0001CD50, 0x0001CD4D, 0x0001CD37, 0x0001CD30, 0x0001CD2F, 0x0001CD2E, 0x0001CD2C, 0x0001CD27, 0x0001CD24, 0x000BF444, 0x000BF443, 0x000BF442, 0x000BF441, 0x000BF440, 0x000BF43F, 0x000BF43E, 0x000BF43D, 0x000BF43C, 0x000BF43B, 0x000BF43A, 0x000BF439, 0x000BF438, 0x000BF437, 0x000BF436, 0x000BF435, 0x000BF434, 0x000BF433, 0x000BF432, 0x000BF431, 0x000BF430, 0x000BF42F, 0x000BF42E, 0x000BF42D, 0x000BF42C, 0x000BF42B, 0x000BF42A, 0x000BF429, 0x000BF428, 0x000BF427, 0x000BF426, 0x000BF425, 0x000BF424, 0x000BF423, 0x000BF422, 0x000BF421, 0x000BF420, 0x000BF41F, 0x000BF41E, 0x000BF41D, 0x000BF41C, 0x000BF41B, 0x000BF41A, 0x000BF419, 0x000BF418, 0x000BF417, 0x000BF416, 0x000BF415, 0x000BF414, 0x000BF413, 0x000BF412, 0x000BF411, 0x000BF410, 0x000BF40F, 0x000BF40E, 0x000BF40D, 0x000BF40C, 0x000BF40B, 0x000BF40A, 0x000BF409, 0x000BF407, 0x000BF406, 0x000BF405, 0x000BF404, 0x000BF403, 0x000BF402, 0x000BF401, 0x000BF400, 0x000BF3FF, 0x000BF3F4, 0x000BF3F3, 0x000BF3F2, 0x000BF3F1, 0x000BF3F0, 0x000BF3EF, 0x000BF3EE, 0x000BF3ED, 0x000BF3EC, 0x000BF3EB, 0x000BF3EA, 0x000BF3E9, 0x000BF3E8, 0x000BF3E7, 0x000BF3E6, 0x000BF3E5, 0x000BF3E4, 0x000BF3E3, 0x000BF3E2, 0x000BF3E1, 0x000BF3E0, 0x000BF3DF, 0x000BF3DE, 0x000BF3DD, 0x000BF3DC, 0x000BF3DB, 0x000BF3DA, 0x000BF3D9, 0x000BF3D8, 0x000BF3D7, 0x000BF3D6, 0x000BF3D5, 0x000BF3D4, 0x000BF3D3, 0x000BF3D2, 0x000BF3D1, 0x000BF3D0, 0x000BF3CF, 0x000BF3CE, 0x000BEFBC, 0x000BEFBB, 0x000BEFBA, 0x000BEFB9, 0x000BEFB8, 0x000BEFB7, 0x000BEFB6, 0x000BEFB5, 0x000BEFB4, 0x000BEFB3, 0x000BEFB2, 0x000BEFB1, 0x000BEFB0, 0x000BEFAF, 0x000BEFAE, 0x000BEFAD, 0x000BEFAC, 0x000BEFAB, 0x000BEFAA, 0x000BEFA9, 0x000BEFA8, 0x000BEFA7, 0x000BEFA6, 0x000BEFA5, 0x000BEFA4, 0x000BEFA3, 0x000BEFA2, 0x000BEFA1, 0x000BEFA0, 0x000BEF9F, 0x000BEF9E, 0x000BEF9D, 0x000BEF9C, 0x000BEF9B, 0x000BEF9A, 0x000BEF99, 0x000BEF98, 0x000BEF97, 0x000BEF96, 0x000BEF95, 0x000BEF94, 0x000BEF93, 0x000BEF92, 0x000BEF91, 0x000BEF90, 0x000BEF8F, 0x000BEF8E, 0x000BEF8D, 0x000BEF8C, 0x000BEF8B, 0x000BEF8A, 0x000BEF89, 0x000BEF88, 0x000BEF87, 0x000BEF86, 0x000BEF85, 0x000BEF84, 0x000BEF83, 0x000BEF82, 0x000BEF81, 0x000BEF80, 0x000BEF7F, 0x000BEF7E, 0x000BEF7D, 0x000BEF7C, 0x000BEF7B, 0x000BEF7A, 0x000BEF79, 0x000BEF78, 0x000BEF77, 0x000BEF76, 0x000BEF75, 0x000BEF74, 0x000BEF73, 0x000BEF72, 0x000BEF71, 0x000BEF70, 0x000BEF6F, 0x000BEF6E, 0x000BEF6D, 0x000BEF6C, 0x000BEF6B, 0x000BEF6A, 0x000BEF69, 0x000BEF68, 0x000BEF67, 0x000BEF66, 0x000BEF65, 0x000BEF64, 0x000BEF63, 0x000BEF62, 0x000BEF61, 0x000BEF60, 0x000BEF5F, 0x000BEF5E, 0x000BEF5D, 0x000BEF5C, 0x000BEF5B, 0x000BEF5A, 0x000BEF59, 0x000BEF58, 0x000BEF57, 0x000BEF56, 0x000BEF55, 0x000BEF54, 0x000BEF53, 0x000BEF52, 0x000BEF51, 0x000BEF50, 0x000BEF4F, 0x000BEF4E, 0x000BEF4D, 0x000BEF4C, 0x000BEF4B, 0x000BEF4A, 0x000BEF49, 0x000BEF48, 0x000BEF47, 0x000BEF46, 0x000BEF45, 0x000BEF44, 0x000BEF43, 0x000BEF42, 0x000BEF41, 0x000BEF40, 0x000BEF3F, 0x000BEF3E, 0x000BEF3D, 0x000BEF3C, 0x000BEF3B, 0x000BEF3A, 0x000BEF39, 0x000BEF38, 0x000BEF37, 0x000BEF36, 0x000BEF35, 0x000BEF34, 0x000BEF33, 0x000BEF32, 0x000BEF31, 0x000BEF30, 0x000BEF2F, 0x000BEF2E, 0x000BEF2D, 0x000BEF2C, 0x000BEF2B, 0x000BEF2A, 0x000BEF29, 0x000BEF28, 0x000BEF27, 0x000BEF26, 0x000BEF25, 0x000BEF24, 0x000BEF23, 0x000BEF22, 0x000BEF21, 0x000BEF20, 0x000BEF1F, 0x000BEF1E, 0x000BEF1D, 0x000BEF1C, 0x000BEF1B, 0x000BEF1A, 0x000BEF19, 0x000BEF18, 0x000BEF17, 0x000BEF16, 0x000BEF15, 0x000BEF14, 0x000BEF13, 0x000BEF12, 0x000BEF11, 0x000BEF10, 0x000BEF0F, 0x000BEF0E, 0x000BEF0D, 0x000BEF0C, 0x000BEF0B, 0x000BEF0A, 0x000BEF09, 0x000BEF08, 0x000BEF07, 0x000BEF06, 0x000BEF05, 0x000BEF04, 0x000BEF03, 0x000BEF02, 0x000BEF01, 0x000BEF00, 0x000BEEFF, 0x000BEEFE, 0x000BEEFD, 0x000BEEFC, 0x000BEEFB, 0x000BEEFA, 0x000BEEF9, 0x000BEEF8, 0x000BEEF7, 0x000BEEF6, 0x000BEEF5, 0x000BEEF4, 0x000BEEF3, 0x000BEEF2, 0x000BEEF1, 0x000BEEF0, 0x000BEEEF, 0x000BEEEE, 0x000BEEED, 0x000BEEEC, 0x000BEEEB, 0x000BEEEA, 0x000BEEE9, 0x000BEEE8, 0x000BEEE7, 0x000BEEE6, 0x000BEEE5, 0x000BEEE4, 0x000BEEE3, 0x000BEEE2, 0x000BEEE1, 0x000BEEE0, 0x000BEEDF, 0x000BEEDE, 0x000BEEDD, 0x000BEEDC, 0x000BEEDB, 0x000BEEDA, 0x000BEED9, 0x000BEED8, 0x000BEED7, 0x000BEED6, 0x000BEED5, 0x000BEED4, 0x000BEED3, 0x000BEED2, 0x000BEED1, 0x000BEED0, 0x000BEECF, 0x000BEECE, 0x000BEECD, 0x000BEECC, 0x000BEECB, 0x000BEEC1, 0x000BEEC0, 0x000BEEBF, 0x000BEEBE, 0x000BEEBD, 0x000BEEBC, 0x000BEEBB, 0x000BEEBA, 0x000BEEB9, 0x000BEEB8, 0x000BEEB7, 0x000BEEB6, 0x000BEEB5, 0x000BEEB4, 0x000BEEB3, 0x000BEEB2, 0x000BEEB1, 0x000BEEB0, 0x000BEEAF, 0x000BEEAE, 0x000BEEAD, 0x000BEEAC, 0x000BEEAB, 0x000BEEAA, 0x000BEEA9, 0x000BEEA8, 0x000BEEA7, 0x000BEEA6, 0x000BEEA5, 0x000BEEA4, 0x000BEEA3, 0x000BEEA2, 0x000BEEA1, 0x000BEEA0, 0x000BEE9F, 0x000BEE9E, 0x000BEE9D, 0x000BE25E, 0x000BE25D, 0x000BE25C, 0x000BE25B, 0x000BE25A, 0x000BE259, 0x000BE258, 0x000BE257, 0x000BE256, 0x000BE255, 0x000BE254, 0x000BE253, 0x000BE252, 0x000BE251, 0x000BE250, 0x000BE24F, 0x000BE24E, 0x000BE24D, 0x000BE24C, 0x000BE24B, 0x000BE24A, 0x000BE249, 0x000BE248, 0x000BE247, 0x000BE246, 0x000BE245, 0x000BE244, 0x000BE243, 0x000BE242, 0x000BE241, 0x000BE240, 0x000BE23F, 0x000BE23E, 0x000BE23D, 0x000BE23C, 0x000BE23B, 0x000BE23A, 0x000BE239, 0x000BE238, 0x000BE237, 0x000BE236, 0x000BE235, 0x000BE234, 0x000BE233, 0x000BE232, 0x000BE231, 0x000BE230, 0x000BE22F, 0x000BE22E, 0x000BE22D, 0x000BE22C, 0x000BE22B, 0x000BE22A, 0x000BE229, 0x000BE228, 0x000BE227, 0x000BE226, 0x000BE225, 0x000BE224, 0x000BE223, 0x000BE222, 0x000BE221, 0x000BE220, 0x000BE21F, 0x000BE21E, 0x000BE21D, 0x000BE21C, 0x000BE21B, 0x000BE21A, 0x000BE219, 0x000BE218, 0x000BE217, 0x000BE216, 0x000BE215, 0x000BE214, 0x000BE213, 0x000BE212, 0x000BE211, 0x000BE210, 0x000BE20F, 0x000BE20E, 0x000BE20D, 0x000BE20C, 0x000BE20B, 0x000BE20A, 0x000BE209, 0x000BE208, 0x000BE207, 0x000BE206, 0x000BE205, 0x000BE204, 0x000BE203, 0x000BE202, 0x000BE201, 0x000BE200, 0x000BE1FF, 0x000BE1FE, 0x000BE1FD, 0x000BE1FC, 0x000BE1FB, 0x000BE1FA, 0x000BE1F9, 0x000BE1F8, 0x000BE1F7, 0x000BE1F6, 0x000BE1F5, 0x000BE1F4, 0x000BE1F3, 0x000BE1F2, 0x000BE1F1, 0x000BE1F0, 0x000BE1EF, 0x000BE1EE, 0x000BE1ED, 0x000BE1EC, 0x000BE1EB, 0x000BE1EA, 0x000BE1E9, 0x000BE1E8, 0x000BE1E7, 0x000BE1E6, 0x000BE1E5, 0x000BE1E4, 0x000BE1E3, 0x000BE1E2, 0x000BE1E1, 0x000BE1E0, 0x000BE1DF, 0x000BE1DE, 0x000BE1DD, 0x000BE1DC, 0x000BE1DB, 0x000BE1DA, 0x000BE1D9, 0x000BE1D8, 0x000BE1D7, 0x000BE1D6, 0x000BE1D5, 0x000BE1D4, 0x000BE1D3, 0x000BE1D2, 0x000BE1D1, 0x000BE1D0, 0x000BE1CF, 0x000BE1CE, 0x000BE1CD, 0x000BE1CC, 0x000BE1CB, 0x000BE1CA, 0x000BE1C9, 0x000BE1C8, 0x000BE1C7, 0x000BE1C6, 0x000BE1C5, 0x000BE1C4, 0x000BE1C3, 0x000BE1C2, 0x000BE1C1, 0x000BE1C0, 0x000BE1BF, 0x000BE1BE, 0x000BE1BD, 0x000BE1BC, 0x000BE1BB, 0x000BE1BA, 0x000BE1B9, 0x000BE1B8, 0x000BE1B7, 0x000BE1B6, 0x000BE1B5, 0x000BE1B4, 0x000BE1B3, 0x000BE1B2, 0x000BE1B1, 0x000BE1B0, 0x000BE1AF, 0x000BE1AE, 0x000BE1AD, 0x000BE1AC, 0x000BE1AB, 0x000BE1AA, 0x000BE1A9, 0x000BE1A8, 0x000BE1A7, 0x000BE1A6, 0x000BE1A5, 0x000BE1A4, 0x000BE1A3, 0x000BE1A2, 0x000BE1A1, 0x000BE1A0, 0x000BE19F, 0x000BE19E, 0x000BE19D, 0x000BE19C, 0x000BE19B, 0x000BE19A, 0x000BE199, 0x000BE198, 0x000BE197, 0x000BE196, 0x000BE195, 0x000BE194, 0x000BE193, 0x000BE192, 0x000BE191, 0x000BE190, 0x000BE18F, 0x000BE18E, 0x000BE18D, 0x000BE18C, 0x000BE18B, 0x000BE18A, 0x000BE189, 0x000BE188, 0x000BE187, 0x000BE186, 0x000BE185, 0x000BE184, 0x000BE183, 0x000BE182, 0x000BE181, 0x000BE180, 0x000BE17F, 0x000BE17E, 0x000BE17D, 0x000BE17C, 0x000BE17B, 0x000BE17A, 0x000BE179, 0x000BE178, 0x000BE177, 0x000BE176, 0x000BE175, 0x000BE174, 0x000BE173, 0x000BE172, 0x000BE171, 0x000BE170, 0x000BE16F, 0x000BE16E, 0x000BE16D, 0x000BE16C, 0x000BE16B, 0x000BE16A, 0x000BE169, 0x000BE168, 0x000BE167, 0x000BE166, 0x000BE165, 0x000BE164, 0x000BE122, 0x000BE121, 0x000BE120, 0x000BE11F, 0x000BD835, 0x000BD834, 0x000BD833, 0x000BD832, 0x000BD831, 0x000BD830, 0x000BD82F, 0x000BD82E, 0x000BD82D, 0x000BD82C, 0x000BD82B, 0x000BD82A, 0x000BD829, 0x000BD828, 0x000BD827, 0x000BD826, 0x000BD825, 0x000BD824, 0x000BD823, 0x000BD822, 0x000BD821, 0x000BD820, 0x000BD81F, 0x000BD81E, 0x000BD81D, 0x000BD81C, 0x000BD81B, 0x000BD81A, 0x000BD819, 0x000BD818, 0x000BD817, 0x000BD816, 0x000BD815, 0x000BD814, 0x000BD813, 0x000BD812, 0x000BD811, 0x000B994E, 0x000B3DFA, 0x000AE087, 0x000AE086, 0x000AE085, 0x000ACC92, 0x000ACC91, 0x000ACC90, 0x000ACC8F, 0x000ACC8E, 0x000ACC8D, 0x000ACC8C, 0x000ACC8B, 0x000ACC8A, 0x000ACC89, 0x000ACC88, 0x000ACC87, 0x000ACC85, 0x000ACC84, 0x000ACC83, 0x000ACC82, 0x000ACC81, 0x000ACC80, 0x000ACC7F, 0x000ACC7E, 0x000ACC7D, 0x000ACC7C, 0x000ACC7B, 0x000ACC7A, 0x000ACC78, 0x000ACC77, 0x000ACC76, 0x000ACC75, 0x000ACC74, 0x000ACC73, 0x000ACC72, 0x000ACC71, 0x000ACC70, 0x000ACC6F, 0x000ACC6E, 0x000ACC6D, 0x000ACC6C, 0x000ACC6B, 0x000ACC6A, 0x000ACC69, 0x000ACC68, 0x000ACC67, 0x000ACC66, 0x000ACC65, 0x000ACC64, 0x000ACC62, 0x000ACC61, 0x000ACC60, 0x000ACC5F, 0x000ACC5E, 0x000ACC5D, 0x000ACC5C, 0x000ACC5B, 0x000ACC5A, 0x000ACC59, 0x000ACC58, 0x000ACC57, 0x000ACC55, 0x000ACC54, 0x000ACC53, 0x000ACC52, 0x000ACC51, 0x000ACC50, 0x000ACC4F, 0x000ACC4E, 0x000ACC4D, 0x000ACC4C, 0x000ACC4B, 0x000ACC4A, 0x000ACC49, 0x000ACC48, 0x000ACC47, 0x000ACC46, 0x000ACC45, 0x000ACC44, 0x000ACC43, 0x000ACC42, 0x000ACC41, 0x000ACC3F, 0x000ACC3E, 0x000ACC3D, 0x000ACC3C, 0x000ACC3B, 0x000ACC3A, 0x000ACC39, 0x000ACC38, 0x000ACC37, 0x000ACC36, 0x000ACC35, 0x000ACC34, 0x000ACC32, 0x000ACC31, 0x000ACC30, 0x000ACC2F, 0x000ACC2E, 0x000ACC2D, 0x000ACC2C, 0x000ACC2B, 0x000ACC2A, 0x000ACC29, 0x000ACC28, 0x000ACC27, 0x000ACC26, 0x000ACC25, 0x000ACC24, 0x000ACC23, 0x000ACC22, 0x000ACC21, 0x000ACC20, 0x000ACC1F, 0x000ACC1E, 0x000ACC1C, 0x000ACC1B, 0x000ACC1A, 0x000ACC19, 0x000ACC18, 0x000ACC17, 0x000ACC16, 0x000ACC15, 0x000ACC14, 0x000ACC13, 0x000ACC12, 0x000ACC11, 0x000ACC0F, 0x000ACC0E, 0x000ACC0D, 0x000ACC0C, 0x000ACC0B, 0x000ACC0A, 0x000ACC09, 0x000ACC08, 0x000ACC07, 0x000ACC06, 0x000ACC05, 0x000ACC04, 0x000ACC03, 0x000ACC02, 0x000ACC01, 0x000ACC00, 0x000ACBFF, 0x000ACBFE, 0x000ACBFD, 0x000ACBFC, 0x000ACBFB, 0x000ACBF9, 0x000ACBF8, 0x000ACBF7, 0x000ACBF6, 0x000ACBF5, 0x000ACBF4, 0x000ACBF3, 0x000ACBF2, 0x000ACBF1, 0x000ACBF0, 0x000ACBEF, 0x000ACBEE, 0x000ACBEC, 0x000ACBEB, 0x000ACBEA, 0x000ACBE9, 0x000ACBE8, 0x000ACBE7, 0x000ACBE6, 0x000ACBE5, 0x000ACBE4, 0x000ACBE3, 0x000ACBE2, 0x000ACBE1, 0x000ACBE0, 0x000ACBDF, 0x000ACBDE, 0x000ACBDD, 0x000ACBDC, 0x000ACBDB, 0x000ACBDA, 0x000ACBD9, 0x000ACBD8, 0x000ACBD7, 0x000ACBD6, 0x000ACBD5, 0x000ACBD4, 0x000ACBD3, 0x000ACBD2, 0x000ACBD1, 0x000ACBD0, 0x000ACBCF, 0x000ACBCC, 0x000ACBCB, 0x000ACBCA, 0x000ACBC9, 0x000ACBC8, 0x000ACBC7, 0x000ACBC6, 0x000ACBC5, 0x000ACBC4, 0x000ACBC3, 0x000ACBC2, 0x000ACBC1, 0x000ACBB4, 0x000ACBB3, 0x000ACBB2, 0x000ACBB1, 0x000ACBB0, 0x000ACBAF, 0x000ACBAE, 0x000ACBAD, 0x000ACBAC, 0x000ACBAB, 0x000ACBAA, 0x000ACBA9, 0x000ACBA8, 0x000ACBA7, 0x000ACBA6, 0x000ACBA5, 0x000ACBA4, 0x000ACBA3, 0x000ACBA2, 0x000ACBA1, 0x000ACBA0, 0x000ACB9F, 0x000ACB9E, 0x000ACB9D, 0x000ACB9C, 0x000ACB9B, 0x000ACB9A, 0x000ACB99, 0x000ACB98, 0x000ACB97, 0x000ACB96, 0x000ACB95, 0x000ACB94, 0x000ACB93, 0x000ACB92, 0x000ACB91, 0x000ACB90, 0x000ACB8F, 0x000ACB8E, 0x000ACB8D, 0x000ACB8C, 0x000ACB8B, 0x000ACB8A, 0x000ACB89, 0x000ACB88, 0x000ACB87, 0x000ACB86, 0x000ACB85, 0x000ACB84, 0x000ACB83, 0x000ACB82, 0x000ACB81, 0x000ACB80, 0x000ACB7F, 0x000ACB7E, 0x000ACB7D, 0x000ACB7C, 0x000ACB6B, 0x000ACB6A, 0x000ACB69, 0x000ACB68, 0x000ACB67, 0x000ACB66, 0x000ACB65, 0x000ACB64, 0x000ACB63, 0x000ACB62, 0x000ACB61, 0x000ACB60, 0x000ABB39, 0x000ABB38, 0x000ABB37, 0x000ABB36, 0x000ABB35, 0x000ABB34, 0x000ABB33, 0x000ABB32, 0x000ABB31, 0x000ABB27, 0x000ABB26, 0x000ABB25, 0x000ABB24, 0x000ABB23, 0x000ABB22, 0x000ABB21, 0x000ABB20, 0x000ABB1F, 0x000ABB1E, 0x000ABB1D, 0x000ABB1C, 0x000ABB1B, 0x000ABB1A, 0x000ABB19, 0x000ABB18, 0x000ABB17, 0x000ABB16, 0x000ABB15, 0x000ABB14, 0x000ABB13, 0x000ABB12, 0x000ABB11, 0x000ABB10, 0x000ABB0F, 0x000ABB0E, 0x000ABB0D, 0x000AB705, 0x000AB704, 0x000AB703, 0x000AB702, 0x000AA20B, 0x000AA20A, 0x000AA209, 0x000AA208, 0x000AA207, 0x000AA206, 0x000AA205, 0x000AA204, 0x000AA203, 0x000AA202, 0x000AA201, 0x000AA200, 0x000AA1FF, 0x000AA1FE, 0x000AA1FD, 0x000AA1FC, 0x000AA1FB, 0x000AA1FA, 0x000AA1F9, 0x000AA1F8, 0x000AA1F7, 0x000AA1F6, 0x000AA1F5, 0x000AA1F4, 0x000AA1F3, 0x000AA1F2, 0x000AA1F1, 0x000AA1F0, 0x000AA1EF, 0x000AA1EE, 0x000AA1ED, 0x000AA1EC, 0x000AA1EB, 0x000AA1EA, 0x000AA1E9, 0x000AA1E8, 0x000AA1E7, 0x000AA1E6, 0x000AA1E5, 0x000AA1E4, 0x000AA1E3, 0x000AA1E2, 0x000AA1E1, 0x000AA1E0, 0x000AA1DF, 0x000AA1DE, 0x000AA1DD, 0x000AA1DC, 0x000AA1DB, 0x000AA1DA, 0x000AA1D9, 0x000AA1D8, 0x000AA1D7, 0x000AA1D6, 0x000AA1D5, 0x000AA1D4, 0x000AA1D3, 0x000AA1D2, 0x000AA1D1, 0x000AA1D0, 0x000AA1CF, 0x000AA1CE, 0x000AA1CD, 0x000AA1CC, 0x000AA1CB, 0x000AA1CA, 0x000AA1C9, 0x000AA1C8, 0x000AA1C7, 0x000AA1C6, 0x000AA1C5, 0x000AA1C4, 0x000AA1C3, 0x000AA1C2, 0x000AA1C1, 0x000AA1C0, 0x000AA1BF, 0x000AA1BE, 0x000AA1BD, 0x000AA1BC, 0x000AA1BB, 0x000AA1BA, 0x000AA1B9, 0x000AA1B8, 0x000AA1B7, 0x000AA1B6, 0x000AA1B5, 0x000AA1B4, 0x000AA1B3, 0x000AA1B2, 0x000AA1B1, 0x000AA1B0, 0x000AA1AF, 0x000AA1AE, 0x000AA1AD, 0x000AA1AC, 0x000AA1AB, 0x000AA1AA, 0x000AA1A9, 0x000AA1A8, 0x000AA1A7, 0x000AA1A6, 0x000AA1A5, 0x000AA1A4, 0x000AA1A3, 0x000AA1A2, 0x000AA1A1, 0x000AA1A0, 0x000AA19F, 0x000AA19E, 0x000AA19D, 0x000AA19C, 0x000AA19B, 0x000AA19A, 0x000AA199, 0x000AA198, 0x000AA197, 0x000AA196, 0x000AA195, 0x000AA194, 0x000AA193, 0x000AA192, 0x000AA191, 0x000AA190, 0x000AA18F, 0x000AA18E, 0x000AA18D, 0x000AA18C, 0x000AA18B, 0x000AA18A, 0x000AA189, 0x000AA188, 0x000AA187, 0x000AA186, 0x000AA185, 0x000AA184, 0x000AA183, 0x000AA182, 0x000AA181, 0x000AA180, 0x000AA17F, 0x000AA17E, 0x000AA17D, 0x000AA17C, 0x000AA17B, 0x000AA17A, 0x000AA179, 0x000AA178, 0x000AA177, 0x000AA176, 0x000AA175, 0x000AA174, 0x000AA173, 0x000AA172, 0x000AA171, 0x000AA170, 0x000AA16F, 0x000AA16E, 0x000AA16D, 0x000AA16C, 0x000AA16B, 0x000AA16A, 0x000AA169, 0x000AA168, 0x000AA167, 0x000AA166, 0x000AA154, 0x000AA153, 0x000AA152, 0x000AA151, 0x000AA150, 0x000AA14F, 0x000AA14E, 0x000AA14D, 0x000AA14C, 0x000AA14B, 0x000AA14A, 0x000AA149, 0x000AA148, 0x000AA147, 0x000AA146, 0x000AA144, 0x000AA143, 0x000AA142, 0x000AA141, 0x000AA140, 0x000AA13F, 0x000AA13E, 0x000AA13D, 0x000AA13C, 0x000AA13B, 0x000AA13A, 0x000AA139, 0x000AA138, 0x000AA137, 0x000AA136, 0x000AA135, 0x000AA134, 0x000AA133, 0x000AA132, 0x000AA131, 0x000AA130, 0x000AA12F, 0x000AA12E, 0x000AA12D, 0x000AA12C, 0x000AA12B, 0x000AA12A, 0x000AA129, 0x000AA128, 0x000AA127, 0x000AA126, 0x000AA125, 0x000AA124, 0x000AA123, 0x000AA122, 0x000AA121, 0x000AA120, 0x000AA11F, 0x000AA11E, 0x000AA11D, 0x000AA11C, 0x000AA11B, 0x000AA11A, 0x000AA119, 0x000AA118, 0x000AA117, 0x000AA116, 0x000AA115, 0x000A88C9, 0x000A735A, 0x000A7359, 0x000A7358, 0x000A7357, 0x000A7356, 0x000A7355, 0x000A7354, 0x000A7353, 0x000A7352, 0x000A7351, 0x000A7350, 0x000A734F, 0x000A734D, 0x000A734C, 0x000A734B, 0x000A734A, 0x000A7349, 0x000A7348, 0x000A7347, 0x000A7346, 0x000A7345, 0x000A7344, 0x000A7343, 0x000A6A2C, 0x000A6A2A, 0x000A6A17, 0x000A6A16, 0x000A6A15, 0x000A6A14, 0x000A6A13, 0x000A6A12, 0x000A6A11, 0x000A6A10, 0x000A6A0E, 0x000A6A0D, 0x000A6A0C, 0x000A6A0B, 0x000A6A0A, 0x000A6A09, 0x000A6A08, 0x000A6A07, 0x000A6A06, 0x000A6A05, 0x000A6A04, 0x000A6A03, 0x000A6A02, 0x000A6A01, 0x000A6A00, 0x000A69FF, 0x000A69E4, 0x000A69E3, 0x000A69E2, 0x000A69E1, 0x000A69E0, 0x000A69DF, 0x000A69DE, 0x000A69DD, 0x000A69DC, 0x000A69DB, 0x000A69DA, 0x000A69D9, 0x000A69D8, 0x000A69D7, 0x000A69D6, 0x000A69D5, 0x000A69D4, 0x000A69D3, 0x000A69D2, 0x000A69D1, 0x000A69D0, 0x000A69CF, 0x000A69CE, 0x000A69CD, 0x000A69CC, 0x000A69CB, 0x000A69CA, 0x000A69C9, 0x000A69C8, 0x000A69C7, 0x000A69C6, 0x000A69C5, 0x000A69C4, 0x000A69C3, 0x000A69C2, 0x000A69C1, 0x000A69C0, 0x000A69BF, 0x000A69BE, 0x000A69BD, 0x000A69BC, 0x000A69BB, 0x000A69BA, 0x000A69B9, 0x000A69B8, 0x000A69B7, 0x000A69B6, 0x000A69B5, 0x000A69B4, 0x000A69B3, 0x000A69B2, 0x000A69B1, 0x000A69B0, 0x000A69AF, 0x000A69AE, 0x000A69AD, 0x000A69AC, 0x000A69AB, 0x000A69AA, 0x000A69A9, 0x000A69A8, 0x000A69A7, 0x000A69A6, 0x000A69A5, 0x000A69A4, 0x000A69A3, 0x000A69A2, 0x000A69A1, 0x000A69A0, 0x000A699F, 0x000A699E, 0x000A699D, 0x000A699C, 0x000A699B, 0x000A699A, 0x000A6999, 0x000A6998, 0x000A6997, 0x000A6996, 0x000A6995, 0x000A6994, 0x000A6993, 0x000A6992, 0x000A6991, 0x000A6990, 0x000A698F, 0x000A698E, 0x000A698D, 0x000A698C, 0x000A698B, 0x000A698A, 0x000A6989, 0x000A6988, 0x000A6987, 0x000A6986, 0x000A6985, 0x000A6984, 0x000A6983, 0x000A6982, 0x000A6981, 0x000A6980, 0x000A697F, 0x000A697E, 0x000A697D, 0x000A697C, 0x000A697B, 0x000A697A, 0x000A6979, 0x000A6978, 0x000A6977, 0x000A6976, 0x000A6975, 0x000A5DF0, 0x000A5DEF, 0x000A56D0, 0x000A56CF, 0x000A56CE, 0x0009FD50, 0x0009F260, 0x0009F25F, 0x0009F25E, 0x0009F25D, 0x0009F25C, 0x0009CCDC, 0x0009CAF3, 0x0009B2B2, 0x000964C9, 0x000956B5, 0x00094A2B, 0x000946FC, 0x0008971C, 0x0008971B, 0x0008971A, 0x00089719, 0x00089718, 0x00089717, 0x00089716, 0x00089715, 0x00089714, 0x00089713, 0x00089712, 0x00089711, 0x00089710, 0x0008970F, 0x0008970E, 0x0008970D, 0x0008970C, 0x0008970B, 0x0008970A, 0x00089709, 0x00089708, 0x00089707, 0x00089706, 0x00089705, 0x00089704, 0x00089703, 0x00089702, 0x00089701, 0x00089700, 0x000896FF, 0x000896FE, 0x000896FD, 0x000896FC, 0x000896FB, 0x000896FA, 0x000896F9, 0x000896F8, 0x000896F7, 0x000896F6, 0x000896F5, 0x000896F4, 0x000896F3, 0x000896F2, 0x000896F1, 0x000896F0, 0x000896EF, 0x000896EE, 0x000896ED, 0x000896EC, 0x000896EB, 0x000896EA, 0x000896E9, 0x000896E8, 0x000896E7, 0x000896E6, 0x000896E5, 0x000896E4, 0x000896E3, 0x000896E2, 0x000896E1, 0x000896E0, 0x000896DF, 0x000896DE, 0x000896DD, 0x000896DC, 0x000896DB, 0x000896DA, 0x000896D9, 0x000896D8, 0x000896D7, 0x000896D6, 0x000896D5, 0x000896D4, 0x000896D3, 0x000896D2, 0x000896D1, 0x000896D0, 0x000896CF, 0x000896CE, 0x000896CD, 0x000896CC, 0x000896CB, 0x000896CA, 0x000896C9, 0x000896C8, 0x000896C7, 0x000896C6, 0x000896C5, 0x000896C4, 0x000896C3, 0x000896C2, 0x000896C1, 0x000896C0, 0x000896BF, 0x000896BE, 0x000896BD, 0x000896BC, 0x000896BB, 0x000896BA, 0x000896B9, 0x000896B8, 0x000896B7, 0x000896B6, 0x000896B5, 0x000896B4, 0x000896B3, 0x000896B2, 0x000896B1, 0x000896B0, 0x000896AF, 0x000896AE, 0x0006A13C, 0x0006A093, 0x000424F9, 0x000424F8, 0x000424F7, 0x0003B0C7, 0x0003B0C6, 0x0003B0C5, 0x0003B0C4, 0x0003B0C3, 0x0003B0C2, 0x0003B0C1, 0x0003B0C0, 0x0003B0BF, 0x0003B0BE, 0x0003B0BD, 0x0003B0BC, 0x0003B0BB, 0x0003B0BA, 0x0003B0B9, 0x0003B0B8, 0x0003B0B7, 0x0003B0B6, 0x0007F6DF, 0x0007E647, 0x0007E646, 0x0007E5C3, 0x0007E5BB, 0x0007A91B, 0x0007A91A, 0x0007A917, 0x000771B9, 0x00053379, 0x00040002, 0x0006F700, 0x0006F6FF, 0x0006B9AD, 0x0006A707, 0x00068976, 0x0005D179, 0x0005D178, 0x0005D177, 0x0005D176, 0x0005BF1A, 0x0005BF19, 0x0005BF18, 0x0005BF16, 0x0005BF15, 0x0005BF14, 0x0005BF13, 0x0005BF12, 0x0005BF11, 0x0005BF10, 0x0005BF0F, 0x0005BF0E, 0x0005BF0D, 0x0005BF0C, 0x0005BF0B, 0x0005BF0A, 0x0005BF09, 0x0005BF08, 0x0005BF07, 0x0005BF06, 0x0005BEFC, 0x0005BEFB, 0x0005BEFA, 0x0005BEF9, 0x0005BEF8, 0x0005BEF7, 0x0005BEF6, 0x0005BEF5, 0x0005BEF4, 0x0005B482, 0x0005B481, 0x0005B480, 0x0005B47F, 0x0005B47E, 0x0005B47D, 0x0005B47C, 0x0005B47B, 0x0005B47A, 0x0005B479, 0x0005B478, 0x0005B477, 0x0005B476, 0x0005B475, 0x0005B474, 0x0005B473, 0x0005B472, 0x0005B471, 0x00058F60, 0x00058F5F, 0x00058F5E, 0x00052FFA, 0x00052FF9, 0x00051B0C, 0x0004E4EE, 0x0004DEE3, 0x0004DEE2, 0x0004DEE1, 0x0004DEE0, 0x0004DED8, 0x0004DE5B, 0x0004C6CA, 0x0004B46B, 0x0004B46A, 0x0004B469, 0x0004B468, 0x0004B467, 0x0004B466, 0x0004B465, 0x0004B464, 0x0004B463, 0x0004B462, 0x0004B461, 0x0004B460, 0x0004B45F, 0x0004B45E, 0x0004B45D, 0x0004B45C, 0x0004B45B, 0x0004B45A, 0x0004B459, 0x0004B458, 0x0004B457, 0x0004B456, 0x0004B455, 0x0004B454, 0x0004B453, 0x0004B452, 0x0004B451, 0x0004B15D, 0x0004B15C, 0x0004B15B, 0x0004B15A, 0x0004B159, 0x0004B158, 0x0004B157, 0x0004B156, 0x0004B155, 0x0004B154, 0x0004B153, 0x0004B152, 0x0004B151, 0x0004B150, 0x0004B14F, 0x0004B14E, 0x0004B14D, 0x0004B14C, 0x00046050, 0x0004602D, 0x0004602C, 0x0004602B, 0x0004602A, 0x00046018, 0x00046017, 0x00046004, 0x00022265, 0x0004A38F, 0x00049BB8, 0x000461DA, 0x000426C8, 0x00035066, 0x0002ACD2, 0x000223FB, 0x0003B562, 0x0003AEB9, 0x000391B5, 0x000391B4, 0x000391B3, 0x000391B2, 0x000391B1, 0x00038340, 0x00035369, 0x000302CD, 0x000302CA, 0x0002F2F4, 0x0002E6D1, 0x000236A5, 0x0001CB64, 0x0001CB36, 0x0001CB30, 0x0002C672, 0x0002C66F, 0x0002AC6F, 0x000284F5, 0x000240D2, 0x000233E3, 0x00022F0F, 0x0001F25B, 0x0001F25A, 0x0001C4E6, 0x0001C492, 0x0001C1FE, 0x000142E3, 0x000139BA, 0x000139B9, 0x000139B8, 0x000139B7, 0x000139B6, 0x000139B5, 0x000139B4, 0x000139B3, 0x000139B2, 0x000139B1, 0x000139B0, 0x000139AF, 0x000139AE, 0x000139AD, 0x000139AC, 0x000139AB, 0x000139AA, 0x000139A9, 0x000139A8, 0x000139A7, 0x000139A6, 0x000139A5, 0x000139A4, 0x000139A3, 0x000139A2, 0x000139A1, 0x000139A0, 0x0001399F, 0x0001399E, 0x0001399D, 0x0001399C, 0x0001399B, 0x0001399A, 0x00013999, 0x00013998, 0x00013997, 0x00013996, 0x00013995, 0x00013994, 0x00013993, 0x00013992, 0x00013991, 0x00013990, 0x0001398F, 0x0001398E, 0x0001398D, 0x0001398C, 0x0001398B, 0x0001398A, 0x00013989, 0x00013988, 0x00013987, 0x00013986, 0x00013985, 0x00013984, 0x00013983, 0x00013982, 0x00013981, 0x00013980, 0x0001397E, 0x00013841, 0x00013790, 0x000135B8, 0x0001359D, 0x00012EB7};

// SetNPCWeight float [0-100] console command
// ExportInventoryItemInfo ref console command
// GetAttacked
// GetCurrentAIProcedure
// GetActionRef 
// SetActorFullName
// GetPlayerAction
// GetPCMiscStat 
// GetLastPlayerAction
// GetHitLocation
// ShowChargenMenu 
// ShowChargenMenuParams 
// MatchFaceGeometry
// IsAttacking
// IsAttackType
// SavePCFace
// DropObject
// GetPlayerName
// GetPlayerTeammate
// SetPlayerTeammate
// GetWalk

item_pkt::item_pkt()
{
	form = 0;
	count = 0;
	equip = 0;
}

item_pkt::~item_pkt()
{
	form = 0;
	count = 0;
	equip = 0;
}

uint actorbase_pkt::size()
{
	return (sizeof(uint)*3 + sizeof(float)*61 + sizeof(item_pkt)*num_items);
}

void DuplicateItems(reflisthdl *ref)
{
	if (ref == NULL)
		return;

	TESForm *item		= NULL;
	uint count			= 0;

	for (int i = 0; i < ITEMARRAYSIZE; i++)
	{
		item = Game::GetFormById(item_array[i]);
		count = ObjectReference::GetItemCount(ref->ref, item);

		if (count > 0)
			ObjectReference::AddItem(ref->ref, item, count, true);
	}
}

void RemoveItems(reflisthdl *ref)
{
	if (ref == NULL)
		return;

	TESForm *item		= NULL;
	uint count			= 0;

	for (int i = 0; i < ITEMARRAYSIZE; i++)
	{
		item = Game::GetFormById(item_array[i]);
		count = ObjectReference::GetItemCount(ref->ref, item);

		if (count > 0)
			ObjectReference::RemoveItem(ref->ref, item, count, true, NULL);
	}
}

actorbase_pkt::actorbase_pkt()
{
	actor_id	= 0;
	form		= 0;
	// Attributes
	health	= 0;
	magicka	= 0;
	stamina	= 0;

	// Skills
	onehanded	= 0;
	twohanded	= 0;
	marksman	= 0;
	block		= 0;
	smithing	= 0;
	heavyarmor	= 0;
	lightarmor	= 0;
	pickpocket	= 0;
	lockpicking	= 0;
	sneak		= 0;
	alchemy		= 0;
	speechcraft	= 0;
	alteration	= 0;
	conjuration	= 0;
	destruction	= 0;
	illusion	= 0;
	restoration	= 0;
	enchanting	= 0;

	// AI Data
	aggression	= 0;
	confidence	= 0;
	energy		= 0;
	morality	= 0;
	mood		= 0;
	assistance	= 0;

	// Other Statistics
	healthrate			= 0;
	magickarate			= 0;
	staminarate			= 0;
	attackdamagemult	= 0;
	speedmult			= 0;
	weaponspeedmult		= 0;
	inventoryweight		= 0;
	carryweight			= 0;
	critchance			= 0;
	meleedamage			= 0;
	unarmeddamage		= 0;
	mass				= 0;
	voicepoints			= 0;
	voicerate			= 0;
	damageresist		= 0;
	poisonresist		= 0;
	fireresist			= 0;
	electricresist		= 0;
	frostresist			= 0;
	magicresist			= 0;
	normalweaponsresist	= 0;
	paralysis			= 0;
	invisibility		= 0;
	nighteye			= 0;
	detectliferange		= 0;
	waterbreathing		= 0;
	waterwalking		= 0;
	jumpingbonus		= 0;
	wardpower			= 0;
	warddeflection		= 0;
	equippeditemcharge	= 0;
	equippedstaffcharge	= 0;
	armorperks			= 0;
	shieldoerks			= 0;
	bowspeedbonus		= 0;
	num_items			= 0;
}

actorbase_pkt::~actorbase_pkt()
{
	actor_id	= 0;
	form		= 0;
	// Attributes
	health		= 0;
	magicka		= 0;
	stamina		= 0;

	// Skills
	onehanded	= 0;
	twohanded	= 0;
	marksman	= 0;
	block		= 0;
	smithing	= 0;
	heavyarmor	= 0;
	lightarmor	= 0;
	pickpocket	= 0;
	lockpicking	= 0;
	sneak		= 0;
	alchemy		= 0;
	speechcraft	= 0;
	alteration	= 0;
	conjuration	= 0;
	destruction	= 0;
	illusion	= 0;
	restoration	= 0;
	enchanting	= 0;

	// AI Data
	aggression	= 0;
	confidence	= 0;
	energy		= 0;
	morality	= 0;
	mood		= 0;
	assistance	= 0;

	// Other Statistics
	healthrate			= 0;
	magickarate			= 0;
	staminarate			= 0;
	attackdamagemult	= 0;
	speedmult			= 0;
	weaponspeedmult		= 0;
	inventoryweight		= 0;
	carryweight			= 0;
	critchance			= 0;
	meleedamage			= 0;
	unarmeddamage		= 0;
	mass				= 0;
	voicepoints			= 0;
	voicerate			= 0;
	damageresist		= 0;
	poisonresist		= 0;
	fireresist			= 0;
	electricresist		= 0;
	frostresist			= 0;
	magicresist			= 0;
	normalweaponsresist	= 0;
	paralysis			= 0;
	invisibility		= 0;
	nighteye			= 0;
	detectliferange		= 0;
	waterbreathing		= 0;
	waterwalking		= 0;
	jumpingbonus		= 0;
	wardpower			= 0;
	warddeflection		= 0;
	equippeditemcharge	= 0;
	equippedstaffcharge	= 0;
	armorperks			= 0;
	shieldoerks			= 0;
	bowspeedbonus		= 0;
	num_items			= 0;
}

void GetActorBasePkt(actorbase_pkt *pkt, reflisthdl *ref)
{
	if (pkt == NULL || ref == NULL)
		return;

	uint race	= 0;
	uint gender	= 0;

	TESForm *act_form = ObjectReference::GetBaseObject(ref->ref);
	if (act_form == NULL)
		return;

	pkt->actor_id	= ref->actor_id;
	pkt->form		= Form::GetFormID(act_form);
	if (pkt->form == ID_TESNPC::Player)
	{
		race = Form::GetFormID((TESForm*)ActorBase::GetRace((TESNPC*)act_form));
		gender = ActorBase::GetSex((TESNPC*)act_form);

		if (race == ID_TESRace::ArgonianRace && gender == 0)
			pkt->form = ID_TESNPC::ArgonianMalePreset01;
		else if (race == ID_TESRace::ArgonianRace && gender == 1)
			pkt->form = ID_TESNPC::ArgonianFemalePreset01;

		else if (race == ID_TESRace::HighElfRace && gender == 0)
			pkt->form = ID_TESNPC::HighElfMalePreset01;
		else if (race == ID_TESRace::HighElfRace && gender == 1)
			pkt->form = ID_TESNPC::HighElfFemalePreset01;

		else if (race == ID_TESRace::WoodElfRace && gender == 0)
			pkt->form = ID_TESNPC::WoodElfMalePreset01;
		else if (race == ID_TESRace::WoodElfRace && gender == 1)
			pkt->form = ID_TESNPC::WoodElfFemalePreset01;

		else if (race == ID_TESRace::BretonRace && gender == 0)
			pkt->form = ID_TESNPC::BretonMalePreset01;
		else if (race == ID_TESRace::BretonRace && gender == 1)
			pkt->form = ID_TESNPC::BretonFemalePreset01;

		else if (race == ID_TESRace::DarkElfRace && gender == 0)
			pkt->form = ID_TESNPC::DarkElfMalePreset01;
		else if (race == ID_TESRace::DarkElfRace && gender == 1)
			pkt->form = ID_TESNPC::DarkElfFemalePreset01;

		else if (race == ID_TESRace::ImperialRace && gender == 0)
			pkt->form = ID_TESNPC::ImperialMalePreset01;
		else if (race == ID_TESRace::ImperialRace && gender == 1)
			pkt->form = ID_TESNPC::ImperialFemalePreset01;

		else if (race == ID_TESRace::KhajiitRace && gender == 0)
			pkt->form = ID_TESNPC::KhajiitMalePreset01;
		else if (race == ID_TESRace::KhajiitRace && gender == 1)
			pkt->form = ID_TESNPC::KhajiitFemalePreset01;

		else if (race == ID_TESRace::NordRace && gender == 0)
			pkt->form = ID_TESNPC::NordMalePreset01;
		else if (race == ID_TESRace::NordRace && gender == 1)
			pkt->form = ID_TESNPC::NordFemalePreset01;

		else if (race == ID_TESRace::OrcRace && gender == 0)
			pkt->form = ID_TESNPC::OrcMalePreset01;
		else if (race == ID_TESRace::OrcRace && gender == 1)
			pkt->form = ID_TESNPC::OrcFemalePreset01;

		else if (race == ID_TESRace::RedguardRace && gender == 0)
			pkt->form = ID_TESNPC::RedguardMalePreset01;
		else if (race == ID_TESRace::RedguardRace && gender == 1)
			pkt->form = ID_TESNPC::RedguardFemalePreset01;
		else
			pkt->form = ID_TESNPC::BlackreachDragon;
	}

	// Attributes
	pkt->health			= Actor::GetBaseActorValue((CActor*)ref->ref, "Health");
	pkt->magicka		= Actor::GetBaseActorValue((CActor*)ref->ref, "Magicka");
	pkt->stamina		= Actor::GetBaseActorValue((CActor*)ref->ref, "Stamina");

	// Skills
	pkt->onehanded		= Actor::GetBaseActorValue((CActor*)ref->ref, "OneHanded");
	pkt->twohanded		= Actor::GetBaseActorValue((CActor*)ref->ref, "TwoHanded");
	pkt->marksman		= Actor::GetBaseActorValue((CActor*)ref->ref, "Marksman");
	pkt->block			= Actor::GetBaseActorValue((CActor*)ref->ref, "Block");
	pkt->smithing		= Actor::GetBaseActorValue((CActor*)ref->ref, "Smithing");
	pkt->heavyarmor		= Actor::GetBaseActorValue((CActor*)ref->ref, "HeavyArmor");
	pkt->lightarmor		= Actor::GetBaseActorValue((CActor*)ref->ref, "LightArmor");
	pkt->pickpocket		= Actor::GetBaseActorValue((CActor*)ref->ref, "Pickpocket");
	pkt->lockpicking	= Actor::GetBaseActorValue((CActor*)ref->ref, "Lockpicking");
	pkt->sneak			= Actor::GetBaseActorValue((CActor*)ref->ref, "Sneak");
	pkt->alchemy		= Actor::GetBaseActorValue((CActor*)ref->ref, "Alchemy");
	pkt->speechcraft	= Actor::GetBaseActorValue((CActor*)ref->ref, "Speechcraft");
	pkt->alteration		= Actor::GetBaseActorValue((CActor*)ref->ref, "Alteration");
	pkt->conjuration	= Actor::GetBaseActorValue((CActor*)ref->ref, "Conjuration");
	pkt->destruction	= Actor::GetBaseActorValue((CActor*)ref->ref, "Destruction");
	pkt->illusion		= Actor::GetBaseActorValue((CActor*)ref->ref, "Illusion");
	pkt->restoration	= Actor::GetBaseActorValue((CActor*)ref->ref, "Restoration");
	pkt->enchanting		= Actor::GetBaseActorValue((CActor*)ref->ref, "Enchanting");

	// AI Data
	pkt->aggression		= Actor::GetBaseActorValue((CActor*)ref->ref, "Aggression");
	pkt->confidence		= Actor::GetBaseActorValue((CActor*)ref->ref, "Confidence");
	pkt->energy			= Actor::GetBaseActorValue((CActor*)ref->ref, "Energy");
	pkt->morality		= Actor::GetBaseActorValue((CActor*)ref->ref, "Morality");
	pkt->mood			= Actor::GetBaseActorValue((CActor*)ref->ref, "Mood");
	pkt->assistance		= Actor::GetBaseActorValue((CActor*)ref->ref, "Assistance");

	// Other Statistics
	pkt->healthrate				= Actor::GetBaseActorValue((CActor*)ref->ref, "HealRate");
	pkt->magickarate			= Actor::GetBaseActorValue((CActor*)ref->ref, "MagickaRate");
	pkt->staminarate			= Actor::GetBaseActorValue((CActor*)ref->ref, "StaminaRate");
	pkt->attackdamagemult		= Actor::GetBaseActorValue((CActor*)ref->ref, "attackDamageMult");
	pkt->speedmult				= Actor::GetBaseActorValue((CActor*)ref->ref, "SpeedMult");
	pkt->weaponspeedmult		= Actor::GetBaseActorValue((CActor*)ref->ref, "WeaponSpeedMult");
	pkt->inventoryweight		= Actor::GetBaseActorValue((CActor*)ref->ref, "InventoryWeight");
	pkt->carryweight			= Actor::GetBaseActorValue((CActor*)ref->ref, "CarryWeight");
	pkt->critchance				= Actor::GetBaseActorValue((CActor*)ref->ref, "CritChance");
	pkt->meleedamage			= Actor::GetBaseActorValue((CActor*)ref->ref, "MeleeDamage");
	pkt->unarmeddamage			= Actor::GetBaseActorValue((CActor*)ref->ref, "UnarmedDamage");
	pkt->mass					= Actor::GetBaseActorValue((CActor*)ref->ref, "Mass");
	pkt->voicepoints			= Actor::GetBaseActorValue((CActor*)ref->ref, "VoicePoints");
	pkt->voicerate				= Actor::GetBaseActorValue((CActor*)ref->ref, "VoiceRate");
	pkt->damageresist			= Actor::GetBaseActorValue((CActor*)ref->ref, "DamageResist");
	pkt->poisonresist			= Actor::GetBaseActorValue((CActor*)ref->ref, "PoisonResist");
	pkt->fireresist				= Actor::GetBaseActorValue((CActor*)ref->ref, "FireResist");
	pkt->electricresist			= Actor::GetBaseActorValue((CActor*)ref->ref, "ElectricResist");
	pkt->frostresist			= Actor::GetBaseActorValue((CActor*)ref->ref, "FrostResist");
	pkt->magicresist			= Actor::GetBaseActorValue((CActor*)ref->ref, "MagicResist");
	pkt->normalweaponsresist	= Actor::GetBaseActorValue((CActor*)ref->ref, "NormalWeaponsResist");
	pkt->paralysis				= Actor::GetBaseActorValue((CActor*)ref->ref, "Paralysis");
	pkt->invisibility			= Actor::GetBaseActorValue((CActor*)ref->ref, "Invisibility");
	pkt->nighteye				= Actor::GetBaseActorValue((CActor*)ref->ref, "NightEye");
	pkt->detectliferange		= Actor::GetBaseActorValue((CActor*)ref->ref, "DetectLifeRange");
	pkt->waterbreathing			= Actor::GetBaseActorValue((CActor*)ref->ref, "WaterBreathing");
	pkt->waterwalking			= Actor::GetBaseActorValue((CActor*)ref->ref, "WaterWalking");
	pkt->jumpingbonus			= Actor::GetBaseActorValue((CActor*)ref->ref, "JumpingBonus");
	pkt->wardpower				= Actor::GetBaseActorValue((CActor*)ref->ref, "WardPower");
	pkt->warddeflection			= Actor::GetBaseActorValue((CActor*)ref->ref, "WardDeflection");
	pkt->equippeditemcharge		= Actor::GetBaseActorValue((CActor*)ref->ref, "EquippedItemCharge");
	pkt->equippedstaffcharge	= Actor::GetBaseActorValue((CActor*)ref->ref, "EquippedStaffCharge");
	pkt->armorperks				= Actor::GetBaseActorValue((CActor*)ref->ref, "ArmorPerks");
	pkt->shieldoerks			= Actor::GetBaseActorValue((CActor*)ref->ref, "ShieldPerks");
	pkt->bowspeedbonus			= Actor::GetBaseActorValue((CActor*)ref->ref, "BowSpeedBonus");
	
	ref->health		= pkt->health;
	ref->magicka	= pkt->magicka;
	ref->stamina	= pkt->stamina;

	TESForm *item		= NULL;
	TESForm *left		= NULL;
	TESForm *right		= NULL;
	uint left_id		= 0;
	uint right_id		= 0;
	uint count			= 0;

	uint left_type = Actor::GetEquippedItemType((CActor*)ref->ref, 1);
	uint right_type = Actor::GetEquippedItemType((CActor*)ref->ref, 0);

	pkt->num_items	= 0;
	pkt->actor_id	= ref->actor_id;

	left	= (TESForm*)Actor::GetEquippedWeapon((CActor*)ref->ref, true);
	right	= (TESForm*)Actor::GetEquippedWeapon((CActor*)ref->ref, false);

	if (left)
		left_id = Form::GetFormID(left);
	if (right)
		right_id = Form::GetFormID(right);

	for (int i = 0; i < ITEMARRAYSIZE; i++)
	{
		item = Game::GetFormById(item_array[i]);
		count = ObjectReference::GetItemCount(ref->ref, item);

		if (count > 0)
		{
			pkt->items[pkt->num_items].count = count;
			pkt->items[pkt->num_items].equip = 0;
			pkt->items[pkt->num_items].equip |= (unsigned char)Actor::IsEquipped((CActor*)ref->ref, item);
			if (left_id == item_array[i] && (left_type < 5 || left_type > 9))
				pkt->items[pkt->num_items].equip |= 0x02;
			if (right_id == item_array[i] && (right_type < 5 || right_type > 9))
				pkt->items[pkt->num_items].equip |= 0x04;

			pkt->items[pkt->num_items].form  = item_array[i];
			pkt->num_items++;
		}
	}
}

void SetActorBasePkt(actorbase_pkt *pkt, reflisthdl *ref)
{
	char str[256];

	if (pkt == NULL || ref == NULL)
		return;

	TESForm *act_form		= Game::GetFormById(pkt->form);
	TESObjectREFR *player	= (TESObjectREFR*)Game::GetPlayer();

	if (act_form == NULL || player == NULL)
		return;

	if ((ref->flags & 0x02) == 0)
	{
		tsStart();
		ref->ref = ObjectReference::PlaceAtMe(player, act_form, 1, false, false);
		ref->lookat = ObjectReference::PlaceAtMe(player, Game::GetFormById(ID_TESObjectMISC::BobbyPin), 1, false, false);
		Actor::SetLookAt((CActor*)ref->ref, ref->lookat, true);
		Actor::SetRestrained((CActor*)ref->ref, true);
		tsEnd();

		// Attributes
		Actor::SetActorValue((CActor*)ref->ref, "Health", pkt->health);
		Actor::SetActorValue((CActor*)ref->ref, "Magicka", pkt->magicka);
		Actor::SetActorValue((CActor*)ref->ref, "Stamina", pkt->stamina);

		// Skills
		Actor::SetActorValue((CActor*)ref->ref, "OneHanded", pkt->onehanded);
		Actor::SetActorValue((CActor*)ref->ref, "TwoHanded", pkt->twohanded);
		Actor::SetActorValue((CActor*)ref->ref, "Marksman", pkt->marksman);
		Actor::SetActorValue((CActor*)ref->ref, "Block", pkt->block);
		Actor::SetActorValue((CActor*)ref->ref, "Smithing", pkt->smithing);
		Actor::SetActorValue((CActor*)ref->ref, "HeavyArmor", pkt->heavyarmor);
		Actor::SetActorValue((CActor*)ref->ref, "LightArmor", pkt->lightarmor);
		Actor::SetActorValue((CActor*)ref->ref, "Pickpocket", pkt->pickpocket);
		Actor::SetActorValue((CActor*)ref->ref, "Lockpicking", pkt->lockpicking);
		Actor::SetActorValue((CActor*)ref->ref, "Sneak", pkt->sneak);
		Actor::SetActorValue((CActor*)ref->ref, "Alchemy", pkt->alchemy);
		Actor::SetActorValue((CActor*)ref->ref, "Speechcraft", pkt->speechcraft);
		Actor::SetActorValue((CActor*)ref->ref, "Alteration", pkt->alteration);
		Actor::SetActorValue((CActor*)ref->ref, "Conjuration", pkt->conjuration);
		Actor::SetActorValue((CActor*)ref->ref, "Destruction", pkt->destruction);
		Actor::SetActorValue((CActor*)ref->ref, "Illusion", pkt->illusion);
		Actor::SetActorValue((CActor*)ref->ref, "Restoration", pkt->restoration);
		Actor::SetActorValue((CActor*)ref->ref, "Enchanting", pkt->enchanting);

		// AI Data
		Actor::SetActorValue((CActor*)ref->ref, "Aggression", pkt->aggression);
		Actor::SetActorValue((CActor*)ref->ref, "Confidence", pkt->confidence);
		Actor::SetActorValue((CActor*)ref->ref, "Energy", pkt->energy);
		Actor::SetActorValue((CActor*)ref->ref, "Morality", pkt->morality);
		Actor::SetActorValue((CActor*)ref->ref, "Mood", pkt->mood);
		Actor::SetActorValue((CActor*)ref->ref, "Assistance", pkt->assistance);

		// Other Statistics
		Actor::SetActorValue((CActor*)ref->ref, "HealRate", pkt->healthrate);
		Actor::SetActorValue((CActor*)ref->ref, "MagickaRate", pkt->magickarate);
		Actor::SetActorValue((CActor*)ref->ref, "StaminaRate", pkt->staminarate);
		Actor::SetActorValue((CActor*)ref->ref, "attackDamageMult", pkt->attackdamagemult);
		Actor::SetActorValue((CActor*)ref->ref, "SpeedMult", pkt->speedmult);
		Actor::SetActorValue((CActor*)ref->ref, "WeaponSpeedMult", pkt->weaponspeedmult);
		Actor::SetActorValue((CActor*)ref->ref, "InventoryWeight", pkt->inventoryweight);
		Actor::SetActorValue((CActor*)ref->ref, "CarryWeight", pkt->carryweight);
		Actor::SetActorValue((CActor*)ref->ref, "CritChance", pkt->critchance);
		Actor::SetActorValue((CActor*)ref->ref, "MeleeDamage", pkt->meleedamage);
		Actor::SetActorValue((CActor*)ref->ref, "UnarmedDamage", pkt->unarmeddamage);
		Actor::SetActorValue((CActor*)ref->ref, "Mass", pkt->mass);
		Actor::SetActorValue((CActor*)ref->ref, "VoicePoints", pkt->voicepoints);
		Actor::SetActorValue((CActor*)ref->ref, "VoiceRate", pkt->voicerate);
		Actor::SetActorValue((CActor*)ref->ref, "DamageResist", pkt->damageresist);
		Actor::SetActorValue((CActor*)ref->ref, "PoisonResist", pkt->poisonresist);
		Actor::SetActorValue((CActor*)ref->ref, "FireResist", pkt->fireresist);
		Actor::SetActorValue((CActor*)ref->ref, "ElectricResist", pkt->electricresist);
		Actor::SetActorValue((CActor*)ref->ref, "FrostResist", pkt->frostresist);
		Actor::SetActorValue((CActor*)ref->ref, "MagicResist", pkt->magicresist);
		Actor::SetActorValue((CActor*)ref->ref, "NormalWeaponsResist", pkt->normalweaponsresist);
		Actor::SetActorValue((CActor*)ref->ref, "Paralysis", pkt->paralysis);
		Actor::SetActorValue((CActor*)ref->ref, "Invisibility", pkt->invisibility);
		Actor::SetActorValue((CActor*)ref->ref, "NightEye", pkt->nighteye);
		Actor::SetActorValue((CActor*)ref->ref, "DetectLifeRange", pkt->detectliferange);
		Actor::SetActorValue((CActor*)ref->ref, "WaterBreathing", pkt->waterbreathing);
		Actor::SetActorValue((CActor*)ref->ref, "WaterWalking", pkt->waterwalking);
		Actor::SetActorValue((CActor*)ref->ref, "JumpingBonus", pkt->jumpingbonus);
		Actor::SetActorValue((CActor*)ref->ref, "WardPower", pkt->wardpower);
		Actor::SetActorValue((CActor*)ref->ref, "WardDeflection", pkt->warddeflection);
		Actor::SetActorValue((CActor*)ref->ref, "EquippedItemCharge", pkt->equippeditemcharge);
		Actor::SetActorValue((CActor*)ref->ref, "EquippedStaffCharge", pkt->equippedstaffcharge);
		Actor::SetActorValue((CActor*)ref->ref, "ArmorPerks", pkt->armorperks);
		Actor::SetActorValue((CActor*)ref->ref, "ShieldPerks", pkt->shieldoerks);
		Actor::SetActorValue((CActor*)ref->ref, "BowSpeedBonus", pkt->bowspeedbonus);

		ref->state			= 0;
		ref->form			= pkt->form;
		ref->flags			= 0x03;
		ref->health			= pkt->health;
		ref->magicka		= pkt->magicka;
		ref->stamina		= pkt->stamina;
		ref->base_health	= pkt->health;
		ref->base_magicka	= pkt->magicka;
		ref->base_stamina	= pkt->stamina;
		ref->x_offset = ObjectReference::GetWidth(ref->ref)/2.0f - ObjectReference::GetWidth(ref->lookat)/2.0f;
		ref->y_offset = ObjectReference::GetLength(ref->ref)/2.0f - ObjectReference::GetLength(ref->lookat)/2.0f;
		ref->z_offset = ObjectReference::GetHeight(ref->ref)/2.0f - ObjectReference::GetHeight(ref->lookat)/2.0f;
	}
	else
		ref->flags		= 0x00;

	TESForm *item = NULL;
	uint left_id		= 0;
	uint right_id		= 0;

	if ((ref->flags & 0x02) > 0 && (ref->flags & 0x04) == 0)
	{
		RemoveItems(ref);
		tsStart();
		for (uint i = 0; i < pkt->num_items; i++)
		{
			sprintf(str, "additem %08X %d", pkt->items[i].form, pkt->items[i].count);
			cqPushCommand(str, ref->ref);
		}

		tsWait(500);
		sprintf(str, "unequipall", ref->ref);
		cqPushCommand(str, ref->ref);

		for (uint i = 0; i < pkt->num_items; i++)
		{
			if ((pkt->items[i].equip & 0x01) > 0)
			{
				if ((pkt->items[i].equip & 0x02) > 0)
				{
					sprintf(str, "equipitem %08X 1 left", pkt->items[i].form);
					cqPushCommand(str, ref->ref);
				}

				if ((pkt->items[i].equip & 0x04) > 0)
				{
					sprintf(str, "equipitem %08X 1 right", pkt->items[i].form);
					cqPushCommand(str, ref->ref);
				}

				if ((pkt->items[i].equip & 0x02) == 0 && (pkt->items[i].equip & 0x04) == 0)
				{
					sprintf(str, "equipitem %08X 1", pkt->items[i].form);
					cqPushCommand(str, ref->ref);
				}
			}
		}
		tsEnd();
	}
}

actor_pkt::actor_pkt()
{
	actor_id	= 0;
	position_x	= 0.0f;
	position_y	= 0.0f;
	position_z	= 0.0f;
	angle_x		= 0.0f;
	angle_y		= 0.0f;
	angle_z		= 0.0f;
	healthrate	= 0.0f;
	magickarate	= 0.0f;
	staminarate	= 0.0f;
	health		= 0.0f;
	magicka		= 0.0f;
	stamina		= 0.0f;
	state		= 0;
	move		= 0;
	turn		= 0;
}

actor_pkt::~actor_pkt()
{
	actor_id	= 0;
	position_x	= 0.0f;
	position_y	= 0.0f;
	position_z	= 0.0f;
	angle_x		= 0.0f;
	angle_y		= 0.0f;
	angle_z		= 0.0f;
	healthrate	= 0.0f;
	magickarate	= 0.0f;
	staminarate	= 0.0f;
	health		= 0.0f;
	magicka		= 0.0f;
	stamina		= 0.0f;
	state		= 0;
	move		= 0;
	turn		= 0;
}

void GetActorPkt(actor_pkt *pkt, reflisthdl *ref)
{
	if (pkt == NULL)
		return;

	pkt->actor_id	= ref->actor_id;
	pkt->position_x	= ObjectReference::GetPositionX(ref->ref);
	pkt->position_y	= ObjectReference::GetPositionY(ref->ref);
	pkt->position_z	= ObjectReference::GetPositionZ(ref->ref);
	pkt->angle_x	= ObjectReference::GetAngleX(ref->ref);
	pkt->angle_y	= ObjectReference::GetAngleY(ref->ref);
	pkt->angle_z	= ObjectReference::GetAngleZ(ref->ref);
	pkt->healthrate		= Actor::GetActorValue((CActor*)ref->ref, "Healthrate");
	pkt->magickarate	= Actor::GetActorValue((CActor*)ref->ref, "Magickarate");
	pkt->staminarate	= Actor::GetActorValue((CActor*)ref->ref, "Staminarate");
	ref->health = pkt->health;
	ref->magicka = pkt->magicka;
	ref->stamina = pkt->stamina;
	pkt->state		= 0;

	if ((ref->flags & 0x04) > 0)
	{
		if (Actor::IsDead((CActor*)ref->ref))
			pkt->state |= ActorPKTDead;
		if (Actor::IsGhost((CActor*)ref->ref))
			pkt->state |= ActorPKTGhost;
		if (Actor::IsFlying((CActor*)ref->ref))
			pkt->state |= ActorPKTFly;
		if (Actor::GetSleepState((CActor*)ref->ref) == 3)
			pkt->state |= ActorPKTSleep;
		if (Actor::GetSitState((CActor*)ref->ref) == 3)
			pkt->state |= ActorPKTSit;
		if (Actor::IsSneaking((CActor*)ref->ref) || GetKeyPressed(0xA2))
			pkt->state |= ActorPKTSneak;
		if (Actor::IsRunning((CActor*)ref->ref) || GetKeyPressed('w') || GetKeyPressed('a') || GetKeyPressed('s') || GetKeyPressed('d'))
			pkt->state |= ActorPKTRun;
		if (Actor::IsSprinting((CActor*)ref->ref) || GetKeyPressed(0xA4))
			pkt->state |= ActorPKTSprint;
		if (GetKeyPressed(' ')) // Space Bar
			pkt->state |= ActorPKTJump;
		if (Actor::IsWeaponDrawn((CActor*)ref->ref))
			pkt->state |= ActorPKTDraw;
		if ((GetKeyPressed(0x01) || (!GetKeyPressed(0x02) && !GetKeyPressed(0x03) && !GetKeyPressed(0x01))) && Obscript::IsAttacking(ref->ref) == 1.0f) // Left Button
			pkt->state |= ActorPKTRightAtk;
		if ((GetKeyPressed(0x02) || GetKeyPressed(0x03)) && Obscript::IsAttacking(ref->ref) == 1.0f) // Right Button
			pkt->state |= ActorPKTLeftAtk;
		if ((GetKeyPressed(0x01) || (!GetKeyPressed(0x02) && !GetKeyPressed(0x03) && !GetKeyPressed(0x01))) && Obscript::IsPowerAttacking(ref->ref) == 1.0f)
			pkt->state |= ActorPKTRightPwrAtk;
		if ((GetKeyPressed(0x02) || GetKeyPressed(0x03)) && Obscript::IsPowerAttacking(ref->ref) == 1.0f)
			pkt->state |= ActorPKTLeftPwrAtk;
		if (Obscript::IsSwimming(ref->ref) == 1.0f)
			pkt->state |= ActorPKTSwim;
		if (Obscript::IsBlocking(ref->ref) == 1.0f)
			pkt->state |= ActorPKTBlocking;
		if (Obscript::IsStaggered(ref->ref) == 1.0f)
			pkt->state |= ActorPktStagger;
		if (Obscript::IsRecoiling(ref->ref) == 1.0f)
			pkt->state |= ActorPktRecoil;

		pkt->move	= (unsigned char)Obscript::IsMoving(ref->ref);
		pkt->turn	= (unsigned char)Obscript::IsTurning(ref->ref);
		ref->state	= pkt->state;

		pkt->health		= Actor::GetActorValue((CActor*)ref->ref, "Health");
		ref->health		= pkt->health;

		pkt->magicka	= Actor::GetActorValue((CActor*)ref->ref, "Magicka");
		ref->magicka	= pkt->magicka;

		pkt->stamina	= Actor::GetActorValue((CActor*)ref->ref, "Stamina");
		ref->stamina	= pkt->stamina;

	}
	else
	{
		pkt->health		= Actor::GetActorValue((CActor*)ref->ref, "Health");
		pkt->health		= pkt->health < ref->health ? ref->health - pkt->health : 0.0f;
		ref->health		= ref->health - pkt->health;

		pkt->magicka	= Actor::GetActorValue((CActor*)ref->ref, "Magicka");
		pkt->magicka	= pkt->magicka < ref->magicka ? ref->magicka - pkt->magicka : 0.0f;
		ref->magicka	= ref->magicka - pkt->magicka;

		pkt->stamina	= Actor::GetActorValue((CActor*)ref->ref, "Stamina");
		pkt->stamina	= pkt->stamina < ref->stamina ? ref->stamina - pkt->stamina : 0.0f;
		ref->stamina	= ref->stamina - pkt->stamina;

	}
}

void SetActorPkt(actor_pkt *pkt, reflisthdl *ref)
{
	float h = 0.0f, m = 0.0f, s = 0.0f;

	if ((ref->flags & 0x02) > 0 && (ref->flags & 0x04) == 0)
	{
		if (pkt->move != 0 || pkt->turn != 0 || (pkt->state & ActorPKTJump) > 0)
		{
			ObjectReference::TranslateTo(ref->ref, pkt->position_x, pkt->position_y, pkt->position_z, pkt->angle_x, pkt->angle_y, pkt->angle_z, 500.0f, 100.0f);
			ObjectReference::TranslateTo(ref->lookat, pkt->position_x + 300.0f*sin(pkt->angle_z*0.01745329251994329572f)*cos(-pkt->angle_x*0.01745329251994329572f) + ref->x_offset, pkt->position_y + 300.0f*cos(pkt->angle_z*0.01745329251994329572f)*cos(-pkt->angle_x*3.14f/180.0f) + ref->y_offset, pkt->position_z + 300.0f*sin(-pkt->angle_x*0.01745329251994329572f) + ref->z_offset, 0.0f, 0.0f, 0.0f, 500.0f, 100.0f);
		}
		/*if (pkt->move != 0)
		{
			cqPushCommand("PerformAction ActionMoveStart", ref->ref);
			switch (pkt->move)
			{
			case 1:
				cqPushCommand("PerformAction ActionMoveForward", ref->ref);
				break;
			case 2:
				cqPushCommand("PerformAction ActionMoveBackward", ref->ref);
				break;
			case 3:
				cqPushCommand("PerformAction ActionMoveLeft", ref->ref);
				break;
			case 4:
				cqPushCommand("PerformAction ActionMoveRight", ref->ref);
				break;
			}
			cqPushCommand("PerformAction ActionMoveStop", ref->ref);
		}

		if (pkt->turn != 0)
		{
			cqPushCommand("PerformAction ActionTurnStart", ref->ref);
			switch (pkt->turn)
			{
				case 1:
					cqPushCommand("PerformAction ActionTurnLeft", ref->ref);
					break;
				case 2:
					cqPushCommand("PerformAction ActionTurnRight", ref->ref);
					break;
			}
			cqPushCommand("PerformAction ActionTurnStop", ref->ref);
		}*/

		if (((pkt->state & ActorPKTDead) > 0) && ((ref->state & ActorPKTDead) == 0))
			Actor::Kill((CActor*)ref->ref, (CActor*)ref->ref);
		if (((pkt->state & ActorPKTDead) == 0) && ((ref->state & ActorPKTDead) > 0))
			Actor::Resurrect((CActor*)ref->ref);

		// Sleep
		// Sit

		if (((pkt->state & ActorPKTSneak) > 0) && ((ref->state & ActorPKTSneak) == 0))
			cqPushCommand("SetForceSneak 1", ref->ref);
		else if (((pkt->state & ActorPKTSneak) == 0) && ((ref->state & ActorPKTSneak) > 0))
			cqPushCommand("SetForceSneak 0", ref->ref);

		if (((pkt->state & ActorPKTRun) > 0) && ((ref->state & ActorPKTRun) == 0))
			cqPushCommand("SetForceRun 1", ref->ref);
		else if (((pkt->state & ActorPKTRun) == 0) && ((ref->state & ActorPKTRun) > 0))
			cqPushCommand("SetForceRun 0", ref->ref);

		if (((pkt->state & ActorPKTSprint) > 0) && ((ref->state & ActorPKTSprint) == 0))
			cqPushCommand("SetPathSprinting 1", ref->ref);
		else if (((pkt->state & ActorPKTSprint) == 0) && ((ref->state & ActorPKTSprint) > 0))
			cqPushCommand("SetPathSprinting 0", ref->ref);

		if (((pkt->state & ActorPKTJump) > 0) && ((ref->state & ActorPKTJump) == 0))
			cqPushCommand("PerformAction ActionJump", ref->ref);
		else if (((pkt->state & ActorPKTJump) == 0) && ((ref->state & ActorPKTJump) > 0))
		{
			Wait(500);
			cqPushCommand("PerformAction ActionLand", ref->ref);
		}

		if (((pkt->state & ActorPKTDraw) > 0) && ((ref->state & ActorPKTDraw) == 0))
			Actor::SetAlert((CActor*)ref->ref, true);
		else if (((pkt->state & ActorPKTDraw) == 0) && ((ref->state & ActorPKTDraw) > 0))
			Actor::SetAlert((CActor*)ref->ref, false);

		if (((pkt->state & ActorPKTLeftAtk) > 0) && ((ref->state & ActorPKTLeftAtk) == 0))
			cqPushCommand("PerformAction ActionLeftAttack", ref->ref);
		else if (((pkt->state & ActorPKTLeftAtk) == 0) && ((ref->state & ActorPKTLeftAtk) > 0))
			cqPushCommand("PerformAction ActionLeftRelease", ref->ref);

		if (((pkt->state & ActorPKTRightAtk) > 0) && ((ref->state & ActorPKTRightAtk) == 0))
			cqPushCommand("PerformAction ActionRightAttack", ref->ref);
		else if (((pkt->state & ActorPKTRightAtk) == 0) && ((ref->state & ActorPKTRightAtk) > 0))
			cqPushCommand("PerformAction ActionRightRelease", ref->ref);

		if (((pkt->state & ActorPKTLeftPwrAtk) > 0) && ((ref->state & ActorPKTLeftPwrAtk) == 0))
			cqPushCommand("PerformAction ActionLeftPowerAttack", ref->ref);
		else if (((pkt->state & ActorPKTLeftPwrAtk) == 0) && ((ref->state & ActorPKTLeftPwrAtk) > 0))
			cqPushCommand("PerformAction ActionLeftRelease", ref->ref);

		if (((pkt->state & ActorPKTRightPwrAtk) > 0) && ((ref->state & ActorPKTRightPwrAtk) == 0))
			cqPushCommand("PerformAction ActionRightPowerAttack", ref->ref);
		else if (((pkt->state & ActorPKTRightPwrAtk) == 0) && ((ref->state & ActorPKTRightPwrAtk) > 0))
			cqPushCommand("PerformAction ActionRightRelease", ref->ref);

		if (((pkt->state & ActorPKTBleadout) > 0) && ((ref->state & ActorPKTBleadout) == 0))
			cqPushCommand("PerformAction ActionBleadoutStart", ref->ref);
		else if (((pkt->state & ActorPKTBleadout) == 0) && ((ref->state & ActorPKTBleadout) > 0))
			cqPushCommand("PerformAction ActionBleadoutStop", ref->ref);
	
		if (((pkt->state & ActorPKTFly) > 0) && ((ref->state & ActorPKTFly) == 0))
			cqPushCommand("PerformAction ActionFlyStart", ref->ref);
		else if (((pkt->state & ActorPKTFly) == 0) && ((ref->state & ActorPKTFly) > 0))
			cqPushCommand("PerformAction ActionFlyStop", ref->ref);

		if (((pkt->state & ActorPKTGhost) > 0) && ((ref->state & ActorPKTGhost) == 0))
			Actor::SetGhost((CActor*)ref->ref, true);
		else if (((pkt->state & ActorPKTGhost) == 0) && ((ref->state & ActorPKTGhost) > 0))
			Actor::SetGhost((CActor*)ref->ref, false);

		if (((pkt->state & ActorPKTBlocking) > 0) && ((ref->state & ActorPKTBlocking) == 0))
			cqPushCommand("PerformAction ActionBlockAnticipate", ref->ref);
		else if (((pkt->state & ActorPKTBlocking) == 0) && ((ref->state & ActorPKTBlocking) > 0))
			cqPushCommand("PerformAction ActionBlockHit", ref->ref);

		if (((pkt->state & ActorPktStagger) > 0) && ((ref->state & ActorPktStagger) == 0))
			cqPushCommand("PerformAction ActionStaggerStart", ref->ref);
		else if (((pkt->state & ActorPktStagger) == 0) && ((ref->state & ActorPktStagger) > 0))
			cqPushCommand("PerformAction ActionStaggerStop", ref->ref);

		if (((pkt->state & ActorPktRecoil) > 0) && ((ref->state & ActorPktRecoil) == 0))
			cqPushCommand("PerformAction ActionRecoil", ref->ref);
		//else if (((pkt->state & ActorPktRecoil) == 0) && ((ref->state & ActorPktRecoil) > 0))
		//	cqPushCommand("PerformAction ActionRecoil", ref->ref);

		ref->state = pkt->state;

		if (pkt->health < ref->health)
			Actor::DamageActorValue((CActor*)ref->ref, "Health", ref->health - pkt->health);
		else
			Actor::RestoreActorValue((CActor*)ref->ref, "Health", pkt->health - ref->health);
		ref->health = pkt->health;

		if (pkt->magicka < ref->magicka)
			Actor::DamageActorValue((CActor*)ref->ref, "Magicka", ref->magicka - pkt->magicka);
		else
			Actor::RestoreActorValue((CActor*)ref->ref, "Magicka", pkt->magicka - ref->magicka);
		ref->magicka = pkt->magicka;
	
		if (pkt->stamina < ref->stamina)
			Actor::DamageActorValue((CActor*)ref->ref, "Stamina", ref->stamina - pkt->stamina);
		else
			Actor::RestoreActorValue((CActor*)ref->ref, "Stamina", pkt->stamina - ref->stamina);
		ref->stamina = pkt->stamina;
	}
	else
	{
		if (pkt->health < 0.0f)
			Actor::DamageActorValue((CActor*)ref->ref, "Health", -pkt->health);
		ref->health += pkt->health;

		if (pkt->stamina < 0.0f)
			Actor::DamageActorValue((CActor*)ref->ref, "Magicka", -pkt->magicka);
		ref->magicka += pkt->magicka;
	
		if (pkt->stamina < 0.0f)
			Actor::DamageActorValue((CActor*)ref->ref, "Stamina", -pkt->stamina);
		ref->stamina += pkt->stamina;
	}
}

game_pkt::game_pkt()
{
	for (int i = 0; i < GamePKTSize; i++)
		data[i] = 0;
}

game_pkt::~game_pkt()
{
	for (int i = 0; i < GamePKTSize; i++)
		data[i] = 0;
}

float game_pkt::get_gametime()
{
	return *((float*)data);
}

void game_pkt::set_gametime(float t)
{
	*((float*)data) = t;
}

uint game_pkt::get_weather()
{
	return *((uint*)(data + sizeof(float)));
}

void game_pkt::set_weather(uint w)
{
	*((uint*)(data + sizeof(float))) = w;
}

uint game_pkt::get_flags()
{
	return *((uint*)(data + sizeof(float) + sizeof(uint))); 
}

void game_pkt::set_flags(uint f)
{
	*((uint*)(data + sizeof(float) + sizeof(uint))) = f;
}

uint game_pkt::get_num_actors()
{
	return *((uint*)(data + sizeof(float) + sizeof(uint)*2));
}

void game_pkt::set_num_actors(uint n)
{
	*((uint*)(data + sizeof(float) + sizeof(uint)*2)) = n;
}

actor_pkt *game_pkt::get_actors(uint i)
{
	return (actor_pkt*)(data + sizeof(float) + sizeof(uint)*3 + sizeof(actor_pkt)*i);
}

uint game_pkt::get_num_actorbases()
{
	return *((uint*)(data + sizeof(float) + sizeof(uint)*4 + sizeof(actor_pkt)*get_num_actors()));
}

void game_pkt::set_num_actorbases(uint n)
{
	*((uint*)(data + sizeof(float) + sizeof(uint)*4 + sizeof(actor_pkt)*get_num_actors())) = n;
}

actorbase_pkt *game_pkt::get_actorbases(uint i)
{
	unsigned char *pos = (unsigned char *)(data + sizeof(float) + sizeof(uint)*5 + sizeof(actor_pkt)*get_num_actors());
	for (uint j = 0; j < i; j++)
		pos += ((actorbase_pkt*)pos)->size();
	
	return (actorbase_pkt*)pos;
}

uint game_pkt::size()
{
	uint size = sizeof(float) + sizeof(uint)*5 + sizeof(actor_pkt)*get_num_actors();
	for (uint j = 0; j < get_num_actorbases(); j++)
		size += ((actorbase_pkt*)(data + size))->size();

	return size;
}